@start
@org
; Data block at 16384
;
; #SCR(loading)
b16384 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 16400 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 16416 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223
 16432 DEFB 240,0,0,0,0,0,0,0,0,7,255,0,0,0,0,0
 16448 DEFB 0,0,63,252,31,252,24,48,12,49,204,0,0,0,2,8
 16464 DEFB 0,0,1,255,255,255,255,224,0,0,0,0,0,0,0,0
 16480 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 16496 DEFB 0,64,15,255,255,255,255,255,128,0,0,0,0,0,0,0
 16512 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 16528 DEFB 0,12,243,255,255,255,255,255,227,0,0,0,0,0,0,0
 16544 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,252,0,63,0
 16560 DEFB 0,0,63,231,39,255,255,255,225,130,16,0,0,0,0,0
 16576 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,3,129,192,0
 16592 DEFB 0,0,7,255,255,248,238,63,0,1,2,4,0,0,0,0
 16608 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0
 16624 DEFB 0,0,0,15,255,255,255,128,56,88,0,128,0,0,0,0
 16640 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 16656 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 16672 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0
 16688 DEFB 15,224,0,0,0,0,0,0,0,3,254,0,0,0,0,0
 16704 DEFB 0,0,63,248,0,12,24,48,12,48,236,0,0,0,0,0
 16720 DEFB 0,119,160,127,255,255,255,240,0,0,0,0,0,0,0,0
 16736 DEFB 124,0,16,0,0,0,0,60,0,0,0,0,0,0,0,0
 16752 DEFB 0,32,31,255,255,255,255,255,192,0,0,0,0,0,0,0
 16768 DEFB 0,0,60,60,126,254,66,60,124,126,0,0,0,0,0,0
 16784 DEFB 0,3,12,255,255,255,255,255,240,192,0,0,0,0,0,0
 16800 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,252,0,63,0
 16816 DEFB 0,0,63,248,200,255,255,255,224,65,12,0,0,0,0,0
 16832 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,3,255,192,0
 16848 DEFB 0,0,7,255,255,255,49,239,0,0,1,2,0,0,0,0
 16864 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,0
 16880 DEFB 0,0,0,3,255,255,254,0,3,6,237,128,0,0,0,0
 16896 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 16912 DEFB 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 16928 DEFB 0,0,63,248,31,240,24,15,240,48,12,0,0,0,4,0
 16944 DEFB 0,30,0,0,3,254,0,0,0,3,254,0,0,0,0,0
 16960 DEFB 0,0,48,0,0,12,24,48,12,48,124,0,0,0,1,0
 16976 DEFB 1,128,95,255,255,255,255,248,0,0,0,0,0,0,0,0
 16992 DEFB 66,68,56,56,56,0,0,66
 17000 DEFB 0,0,0,0,0,0,0,0
 17008 DEFB 0,16,31,255,255,255,255,255
 17016 DEFB 192,0,0,0,0,0,0,0
 17024 DEFB 0,0,64,66,64,16,66,66
 17032 DEFB 66,64,0,0,0,0,0,0
 17040 DEFB 0,0,179,63,255,255,255,255
 17048 DEFB 248,48,0,0,0,0,0,0
 17056 DEFB 0,0,0,0,0,0,0,0
 17064 DEFB 0,0,0,0,252,0,63,0
 17072 DEFB 0,0,63,255,55,63,255,255
 17080 DEFB 224,48,131,0,0,0,0,0
 17088 DEFB 0,0,0,0,0,0,0,0
 17096 DEFB 0,0,0,0,3,255,192,0
 17104 DEFB 0,0,3,255,255,255,222,113
 17112 DEFB 0,1,0,130,0,0,0,0
 17120 DEFB 0,0,0,0,0,0,0,0
 17128 DEFB 0,0,0,7,255,255,255,224
 17136 DEFB 0,0,0,0,255,255,248,0
 17144 DEFB 0,240,0,0,64,0,0,0
 17152 DEFB 0,0,0,0,0,0,0,0
 17160 DEFB 0,0,0,0,0,0,0,0
 17168 DEFB 0,0,0,0,0,0,0,0
 17176 DEFB 0,0,248,0,0,0,0,0
 17184 DEFB 0,0,63,252,63,248,24,31
 17192 DEFB 248,56,12,0,0,0,0,0
 17200 DEFB 0,1,224,0,63,255,224,0
 17208 DEFB 0,3,254,0,0,0,0,0
 17216 DEFB 0,0,48,0,48,12,24,48
 17224 DEFB 12,48,60,0,0,0,0,194
 17232 DEFB 0,0,1,255,255,255,255,252
 17240 DEFB 0,0,0,0,0,0,0,0
 17248 DEFB 124,68,16,68,64,16,0,64
 17256 DEFB 0,0,0,0,0,0,0,0
 17264 DEFB 0,196,31,255,255,255,255,255
 17272 DEFB 192,0,0,0,0,0,0,0
 17280 DEFB 0,0,60,66,124,16,66,66
 17288 DEFB 66,124,0,0,0,0,0,0
 17296 DEFB 0,0,28,207,255,255,255,255
 17304 DEFB 246,8,0,0,0,0,0,0
 17312 DEFB 0,0,0,0,0,0,0,0
 17320 DEFB 0,0,0,0,252,0,63,0
 17328 DEFB 0,0,31,255,204,199,255,255
 17336 DEFB 192,16,97,0,0,0,0,0
 17344 DEFB 0,0,0,0,0,0,0,0
 17352 DEFB 0,0,0,0,3,255,192,0
 17360 DEFB 0,0,1,255,255,255,243,132
 17368 DEFB 160,0,0,129,128,0,0,0
 17376 DEFB 0,0,0,0,0,0,0,0
 17384 DEFB 0,0,0,7,255,255,255,224
 17392 DEFB 0,0,0,0,63,255,224,0
 17400 DEFB 0,6,0,0,0,0,0,0
 17408 DEFB 0,0,0,0,0,0,0,0
 17416 DEFB 0,0,0,0,0,0,0,0
 17424 DEFB 0,0,0,0,0,0,0,0
 17432 DEFB 0,1,252,0,0,0,0,0
 17440 DEFB 0,0,48,12,48,24,24,48
 17448 DEFB 12,60,12,0,0,0,16,0
 17456 DEFB 0,0,30,0,255,255,248,0
 17464 DEFB 0,1,252,0,0,0,0,0
 17472 DEFB 0,0,48,0,63,252,24,31
 17480 DEFB 248,48,28,0,0,0,0,17
 17488 DEFB 4,0,3,255,255,255,255,254
 17496 DEFB 0,0,0,0,0,0,0,0
 17504 DEFB 66,68,16,120,56,0,0,64
 17512 DEFB 0,0,0,0,0,0,0,0
 17520 DEFB 0,35,63,255,255,255,255,255
 17528 DEFB 224,0,0,0,0,0,0,0
 17536 DEFB 0,0,2,66,64,16,66,126
 17544 DEFB 124,64,0,0,0,0,0,0
 17552 DEFB 0,0,39,51,255,255,255,255
 17560 DEFB 225,132,0,0,0,0,0,0
 17568 DEFB 0,0,0,0,0,0,0,0
 17576 DEFB 0,0,0,0,252,0,63,0
 17584 DEFB 0,0,31,255,247,57,255,255
 17592 DEFB 192,8,16,192,0,0,0,0
 17600 DEFB 0,0,0,0,0,0,0,0
 17608 DEFB 0,0,0,0,31,255,248,0
 17616 DEFB 0,0,0,255,255,255,252,54
 17624 DEFB 31,131,0,0,128,0,0,0
 17632 DEFB 0,0,0,0,0,0,0,0
 17640 DEFB 0,0,0,7,255,255,255,224
 17648 DEFB 0,0,0,0,3,254,0,0
 17656 DEFB 0,1,224,0,32,0,0,0
 17664 DEFB 0,0,0,0,0,0,0,0
 17672 DEFB 0,0,0,0,0,0,0,0
 17680 DEFB 0,0,0,0,0,0,0,0
 17688 DEFB 0,3,254,0,0,0,0,0
 17696 DEFB 0,0,48,12,48,0,24,48
 17704 DEFB 12,62,12,0,0,0,0,1
 17712 DEFB 223,254,1,227,255,255,254,0
 17720 DEFB 0,0,248,0,0,0,0,0
 17728 DEFB 0,0,48,0,31,248,24,15
 17736 DEFB 240,48,12,0,0,0,0,8
 17744 DEFB 128,0,7,255,255,255,255,255
 17752 DEFB 0,0,0,0,0,0,0,0
 17760 DEFB 66,60,16,64,4,0,0,66
 17768 DEFB 0,0,0,0,0,0,0,0
 17776 DEFB 0,152,191,255,255,255,255,255
 17784 DEFB 224,0,0,0,0,0,0,0
 17792 DEFB 0,0,66,66,64,16,90,66
 17800 DEFB 68,64,0,0,0,0,0,0
 17808 DEFB 0,0,57,204,255,255,255,255
 17816 DEFB 248,99,0,0,0,0,0,0
 17824 DEFB 0,0,0,0,0,0,0,0
 17832 DEFB 0,0,0,0,252,0,63,0
 17840 DEFB 0,0,31,255,252,198,63,255
 17848 DEFB 192,4,24,32,0,0,0,0
 17856 DEFB 0,0,0,0,0,0,0,0
 17864 DEFB 0,0,0,0,31,255,248,0
 17872 DEFB 0,0,0,127,255,255,255,193
 17880 DEFB 225,110,0,0,0,0,0,0
 17888 DEFB 0,0,0,0,0,0,0,0
 17896 DEFB 0,0,0,56,252,0,63,28
 17904 DEFB 0,0,0,0,0,0,0,0
 17912 DEFB 0,0,62,0,192,0,0,0
 17920 DEFB 0,0,0,0,0,0,0,0
 17928 DEFB 0,0,0,0,0,0,0,0
 17936 DEFB 0,0,0,0,0,0,0,0
 17944 DEFB 0,3,254,0,0,0,0,0
 17952 DEFB 0,0,48,12,48,0,24,48
 17960 DEFB 12,55,12,0,0,0,0,2
 17968 DEFB 0,1,240,31,255,255,255,128
 17976 DEFB 0,0,0,0,0,0,0,0
 17984 DEFB 0,0,0,0,0,0,0,0
 17992 DEFB 0,0,0,0,0,0,0,4
 18000 DEFB 65,0,7,255,255,255,255,255
 18008 DEFB 0,0,0,0,0,0,0,0
 18016 DEFB 124,4,12,60,120,16,0,60
 18024 DEFB 0,0,0,0,0,0,0,0
 18032 DEFB 0,68,95,255,255,255,255,255
 18040 DEFB 248,0,0,0,0,0,0,0
 18048 DEFB 0,0,60,60,64,16,36,66
 18056 DEFB 66,126,0,0,0,0,0,0
 18064 DEFB 0,0,62,115,63,255,255,255
 18072 DEFB 230,48,192,0,0,0,0,0
 18080 DEFB 0,0,0,0,0,0,0,0
 18088 DEFB 0,0,0,0,3,129,192,0
 18096 DEFB 0,0,15,255,255,57,255,255
 18104 DEFB 128,2,4,16,0,0,0,0
 18112 DEFB 0,0,0,0,0,0,0,0
 18120 DEFB 0,0,0,0,31,255,248,0
 18128 DEFB 0,0,0,63,255,255,255,228
 18136 DEFB 12,0,0,128,64,0,0,0
 18144 DEFB 0,0,0,0,0,0,0,0
 18152 DEFB 0,0,0,56,252,0,63,28
 18160 DEFB 0,0,0,0,0,0,0,0
 18168 DEFB 0,0,0,237,128,0,0,0
 18176 DEFB 0,0,0,0,0,0,0,0
 18184 DEFB 0,0,0,0,0,0,0,0
 18192 DEFB 0,0,0,0,0,0,0,0
 18200 DEFB 0,3,254,0,0,0,0,0
 18208 DEFB 0,0,48,12,63,248,24,48
 18216 DEFB 12,51,140,0,0,0,4,0
 18224 DEFB 0,0,14,31,255,255,255,192
 18232 DEFB 0,0,0,0,0,0,0,0
 18240 DEFB 0,0,0,0,0,0,0,0
 18248 DEFB 0,0,0,0,0,0,0,3
 18256 DEFB 16,128,15,255,255,255,255,255
 18264 DEFB 128,0,0,0,0,0,0,0
 18272 DEFB 0,56,0,0,0,0,0,0
 18280 DEFB 0,0,0,0,0,0,0,0
 18288 DEFB 0,51,47,255,255,255,255,255
 18296 DEFB 228,0,0,0,0,0,0,0
 18304 DEFB 0,0,0,0,0,0,0,0
 18312 DEFB 0,0,0,0,0,0,0,0
 18320 DEFB 0,0,63,156,207,255,255,255
 18328 DEFB 225,12,32,0,0,0,0,0
 18336 DEFB 0,0,0,0,0,0,0,0
 18344 DEFB 0,0,0,0,3,129,192,0
 18352 DEFB 0,0,15,255,255,198,33,255
 18360 DEFB 128,2,2,24,0,0,0,0
 18368 DEFB 0,0,0,0,0,0,0,0
 18376 DEFB 0,0,0,0,255,255,255,0
 18384 DEFB 0,0,0,31,255,255,255,195
 18392 DEFB 195,128,0,0,32,0,0,0
 18400 DEFB 0,0,0,0,0,0,0,0
 18408 DEFB 0,0,0,56,252,0,63,28
 18416 DEFB 0,0,0,0,0,0,0,0
 18424 DEFB 0,0,0,0,0,0,0,0
 18432 DEFB 0,0,0,0,0,0,0,0
 18440 DEFB 0,0,0,56,31,255,248,28
 18448 DEFB 0,0,0,0,0,0,0,0
 18456 DEFB 0,0,0,0,0,0,0,0
 18464 DEFB 0,0,0,0,0,0,0,0
 18472 DEFB 0,0,0,0,28,0,56,0
 18480 DEFB 0,0,0,0,0,0,0,0
 18488 DEFB 0,0,0,0,0,0,0,0
 18496 DEFB 0,0,0,0,0,0,0,0
 18504 DEFB 0,0,0,0,0,0,0,0
 18512 DEFB 0,0,0,0,0,0,0,0
 18520 DEFB 0,0,0,0,0,0,0,0
 18528 DEFB 0,0,0,0,0,0,0,0
 18536 DEFB 0,0,0,0,0,0,0,0
 18544 DEFB 0,0,0,0,0,0,0,0
 18552 DEFB 0,0,0,0,0,0,0,0
 18560 DEFB 0,0,0,7,248,31,248,7
 18568 DEFB 248,7,248,31,254,0,0,31
 18576 DEFB 248,7,248,7,254,31,224,31
 18584 DEFB 254,31,248,7,248,0,0,0
 18592 DEFB 0,0,0,7,248,24,6,24
 18600 DEFB 6,24,0,31,248,0,0,24
 18608 DEFB 6,24,6,0,96,24,6,31
 18616 DEFB 248,24,6,7,248,0,0,0
 18624 DEFB 0,0,0,24,6,24,0,24
 18632 DEFB 6,24,6,24,0,0,0,24
 18640 DEFB 24,24,6,0,96,24,24,24
 18648 DEFB 0,24,24,24,6,0,0,0
 18656 DEFB 0,0,0,0,0,0,0,0
 18664 DEFB 0,0,0,0,0,0,0,0
 18672 DEFB 0,0,0,0,0,0,0,0
 18680 DEFB 0,0,0,0,0,0,0,0
 18688 DEFB 0,0,0,0,0,0,0,0
 18696 DEFB 0,0,0,56,31,255,248,28
 18704 DEFB 0,0,0,0,0,0,0,0
 18712 DEFB 0,0,0,0,0,0,0,0
 18720 DEFB 0,0,0,0,0,0,0,0
 18728 DEFB 0,0,0,0,3,129,192,0
 18736 DEFB 0,0,0,0,0,0,0,0
 18744 DEFB 0,0,0,0,0,0,0,0
 18752 DEFB 0,0,0,0,0,0,0,0
 18760 DEFB 0,0,0,0,0,0,0,0
 18768 DEFB 0,0,0,0,0,0,0,0
 18776 DEFB 0,0,0,0,0,0,0,0
 18784 DEFB 0,0,0,0,0,0,0,0
 18792 DEFB 0,0,0,0,0,0,0,0
 18800 DEFB 0,0,0,0,0,0,0,0
 18808 DEFB 0,0,0,0,0,0,0,0
 18816 DEFB 0,0,0,7,248,31,248,7
 18824 DEFB 248,7,248,31,254,0,0,31
 18832 DEFB 248,7,248,7,254,31,224,31
 18840 DEFB 254,31,248,7,248,0,0,0
 18848 DEFB 0,0,0,7,248,24,6,24
 18856 DEFB 6,24,0,31,248,0,0,24
 18864 DEFB 6,24,6,0,96,24,6,31
 18872 DEFB 248,24,6,7,248,0,0,0
 18880 DEFB 0,0,0,24,6,24,0,24
 18888 DEFB 6,24,6,24,0,0,0,24
 18896 DEFB 24,24,6,0,96,24,24,24
 18904 DEFB 0,24,24,24,6,0,0,0
 18912 DEFB 0,0,0,0,0,0,0,0
 18920 DEFB 0,0,0,0,0,0,0,0
 18928 DEFB 0,0,0,0,0,0,0,0
 18936 DEFB 0,0,0,0,0,0,0,0
 18944 DEFB 0,0,0,0,0,0,0,0
 18952 DEFB 0,0,0,56,31,255,248,28
 18960 DEFB 0,0,0,0,0,0,0,0
 18968 DEFB 0,0,0,0,0,0,0,0
 18976 DEFB 0,0,0,0,0,0,0,0
 18984 DEFB 0,0,0,0,3,129,192,0
 18992 DEFB 0,0,0,0,0,0,0,0
 19000 DEFB 0,0,0,0,0,0,0,0
 19008 DEFB 0,0,0,0,0,0,0,0
 19016 DEFB 0,0,0,0,0,0,0,0
 19024 DEFB 0,0,0,0,0,0,0,0
 19032 DEFB 0,0,0,0,0,0,0,0
 19040 DEFB 0,0,0,0,0,0,0,0
 19048 DEFB 0,0,0,0,0,0,0,0
 19056 DEFB 0,0,0,0,0,0,0,0
 19064 DEFB 0,0,0,0,0,0,0,0
 19072 DEFB 0,0,0,24,0,24,6,24
 19080 DEFB 6,24,6,24,0,0,0,24
 19088 DEFB 6,24,6,0,96,24,24,24
 19096 DEFB 0,24,6,24,0,0,0,0
 19104 DEFB 0,0,0,0,6,31,248,31
 19112 DEFB 254,24,0,24,0,0,0,31
 19120 DEFB 248,31,254,0,96,24,6,24
 19128 DEFB 0,31,248,0,6,0,0,0
 19136 DEFB 0,0,0,7,248,24,0,24
 19144 DEFB 6,7,248,31,254,0,0,24
 19152 DEFB 6,24,6,7,254,31,224,31
 19160 DEFB 254,24,6,7,248,0,0,0
 19168 DEFB 0,0,0,0,0,0,0,0
 19176 DEFB 0,0,0,0,0,0,0,0
 19184 DEFB 0,0,0,0,0,0,0,0
 19192 DEFB 0,0,0,0,0,0,0,0
 19200 DEFB 0,0,0,0,0,0,0,0
 19208 DEFB 0,0,0,0,3,129,192,0
 19216 DEFB 0,0,0,0,0,0,0,0
 19224 DEFB 0,0,0,0,0,0,0,0
 19232 DEFB 0,0,0,0,0,0,0,0
 19240 DEFB 0,0,0,0,3,129,192,0
 19248 DEFB 0,0,0,0,0,0,0,0
 19256 DEFB 0,0,0,0,0,0,0,0
 19264 DEFB 0,0,0,0,0,0,0,0
 19272 DEFB 0,0,0,0,0,0,0,0
 19280 DEFB 0,0,0,0,0,0,0,0
 19288 DEFB 0,0,0,0,0,0,0,0
 19296 DEFB 0,0,0,0,0,0,0,0
 19304 DEFB 0,0,0,0,0,0,0,0
 19312 DEFB 0,0,0,0,0,0,0,0
 19320 DEFB 0,0,0,0,0,0,0,0
 19328 DEFB 0,0,0,24,0,24,6,24
 19336 DEFB 6,24,6,24,0,0,0,24
 19344 DEFB 6,24,6,0,96,24,24,24
 19352 DEFB 0,24,6,24,0,0,0,0
 19360 DEFB 0,0,0,0,6,31,248,31
 19368 DEFB 254,24,0,24,0,0,0,31
 19376 DEFB 248,31,254,0,96,24,6,24
 19384 DEFB 0,31,248,0,6,0,0,0
 19392 DEFB 0,0,0,7,248,24,0,24
 19400 DEFB 6,7,248,31,254,0,0,24
 19408 DEFB 6,24,6,7,254,31,224,31
 19416 DEFB 254,24,6,7,248,0,0,0
 19424 DEFB 0,0,0,0,0,0,0,0
 19432 DEFB 0,0,0,0,0,0,0,0
 19440 DEFB 0,0,0,0,0,0,0,0
 19448 DEFB 0,0,0,0,0,0,0,0
 19456 DEFB 0,0,0,0,0,0,0,0
 19464 DEFB 0,0,0,0,3,129,192,0
 19472 DEFB 0,0,0,0,0,0,0,0
 19480 DEFB 0,0,0,0,0,0,0,0
 19488 DEFB 0,0,0,0,0,0,0,0
 19496 DEFB 0,0,0,0,0,0,0,0
 19504 DEFB 0,0,0,0,0,0,0,0
 19512 DEFB 0,0,0,0,0,0,0,0
 19520 DEFB 0,0,0,0,0,0,0,0
 19528 DEFB 0,0,0,0,0,0,0,0
 19536 DEFB 0,0,0,0,0,0,0,0
 19544 DEFB 0,0,0,0,0,0,0,0
 19552 DEFB 0,0,0,0,0,0,0,0
 19560 DEFB 0,0,0,0,0,0,0,0
 19568 DEFB 0,0,0,0,0,0,0,0
 19576 DEFB 0,0,0,0,0,0,0,0
 19584 DEFB 0,0,0,24,0,24,6,24
 19592 DEFB 6,24,6,24,0,0,0,24
 19600 DEFB 6,24,6,0,96,24,24,24
 19608 DEFB 0,24,6,24,0,0,0,0
 19616 DEFB 0,0,0,0,6,31,248,31
 19624 DEFB 254,24,0,24,0,0,0,31
 19632 DEFB 248,31,254,0,96,24,6,24
 19640 DEFB 0,31,248,0,6,0,0,0
 19648 DEFB 0,0,0,7,248,24,0,24
 19656 DEFB 6,7,248,31,254,0,0,24
 19664 DEFB 6,24,6,7,254,31,224,31
 19672 DEFB 254,24,6,7,248,0,0,0
 19680 DEFB 0,0,0,0,0,0,0,0
 19688 DEFB 0,0,0,0,0,0,0,0
 19696 DEFB 0,0,0,0,0,0,0,0
 19704 DEFB 0,0,0,0,0,0,0,0
 19712 DEFB 0,0,0,0,0,0,0,0
 19720 DEFB 0,0,0,0,3,129,192,0
 19728 DEFB 0,0,0,0,0,0,0,0
 19736 DEFB 0,0,0,0,0,0,0,0
 19744 DEFB 0,0,0,0,0,0,0,0
 19752 DEFB 0,0,0,0,0,0,0,0
 19760 DEFB 0,0,0,0,0,0,0,0
 19768 DEFB 0,0,0,0,0,0,0,0
 19776 DEFB 0,0,0,0,0,0,0,0
 19784 DEFB 0,0,0,0,0,0,0,0
 19792 DEFB 0,0,0,0,0,0,0,0
 19800 DEFB 0,0,0,0,0,0,0,0
 19808 DEFB 0,0,0,0,0,0,0,0
 19816 DEFB 0,0,0,0,0,0,0,0
 19824 DEFB 0,0,0,0,0,0,0,0
 19832 DEFB 0,0,0,0,0,0,0,0
 19840 DEFB 0,0,0,24,0,24,6,24
 19848 DEFB 6,24,6,24,0,0,0,24
 19856 DEFB 6,24,6,0,96,24,24,24
 19864 DEFB 0,24,6,24,0,0,0,0
 19872 DEFB 0,0,0,0,6,31,248,31
 19880 DEFB 254,24,0,24,0,0,0,31
 19888 DEFB 248,31,254,0,96,24,6,24
 19896 DEFB 0,31,248,0,6,0,0,0
 19904 DEFB 0,0,0,7,248,24,0,24
 19912 DEFB 6,7,248,31,254,0,0,24
 19920 DEFB 6,24,6,7,254,31,224,31
 19928 DEFB 254,24,6,7,248,0,0,0
 19936 DEFB 0,0,0,0,0,0,0,0
 19944 DEFB 0,0,0,0,0,0,0,0
 19952 DEFB 0,0,0,0,0,0,0,0
 19960 DEFB 0,0,0,0,0,0,0,0
 19968 DEFB 0,0,0,0,0,0,0,0
 19976 DEFB 0,0,0,0,28,0,56,0
 19984 DEFB 0,0,0,0,0,0,0,0
 19992 DEFB 0,0,0,0,0,0,0,0
 20000 DEFB 0,0,0,0,0,0,0,0
 20008 DEFB 0,0,0,0,0,0,0,0
 20016 DEFB 0,0,0,0,0,0,0,0
 20024 DEFB 0,0,0,0,0,0,0,0
 20032 DEFB 0,0,0,0,0,0,0,0
 20040 DEFB 0,0,0,0,0,0,0,0
 20048 DEFB 0,0,0,0,0,0,0,0
 20056 DEFB 0,0,0,0,0,0,0,0
 20064 DEFB 0,0,0,7,248,31,248,7
 20072 DEFB 248,7,248,31,254,0,0,31
 20080 DEFB 248,7,248,7,254,31,224,31
 20088 DEFB 254,31,248,7,248,0,0,0
 20096 DEFB 0,0,0,7,248,24,6,24
 20104 DEFB 6,24,0,31,248,0,0,24
 20112 DEFB 6,24,6,0,96,24,6,31
 20120 DEFB 248,24,6,7,248,0,0,0
 20128 DEFB 0,0,0,24,6,24,0,24
 20136 DEFB 6,24,6,24,0,0,0,24
 20144 DEFB 24,24,6,0,96,24,24,24
 20152 DEFB 0,24,24,24,6,0,0,0
 20160 DEFB 0,0,0,0,0,0,0,0
 20168 DEFB 0,0,0,0,0,0,0,0
 20176 DEFB 0,0,0,0,0,0,0,0
 20184 DEFB 0,0,0,0,0,0,0,0
 20192 DEFB 0,0,0,0,0,0,0,0
 20200 DEFB 0,0,0,0,0,0,0,0
 20208 DEFB 0,0,0,0,0,0,0,0
 20216 DEFB 0,0,0,0,0,0,0,0
 20224 DEFB 0,0,0,0,0,0,0,0
 20232 DEFB 0,0,0,0,28,0,56,0
 20240 DEFB 0,0,0,0,0,0,0,0
 20248 DEFB 0,0,0,0,0,0,0,0
 20256 DEFB 0,0,0,0,0,0,0,0
 20264 DEFB 0,0,0,0,0,0,0,0
 20272 DEFB 0,0,0,0,0,0,0,0
 20280 DEFB 0,0,0,0,0,0,0,0
 20288 DEFB 0,0,0,0,0,0,0,0
 20296 DEFB 0,0,0,0,0,0,0,0
 20304 DEFB 0,0,0,0,0,0,0,0
 20312 DEFB 0,0,0,0,0,0,0,0
 20320 DEFB 0,0,0,7,248,31,248,7
 20328 DEFB 248,7,248,31,254,0,0,31
 20336 DEFB 248,7,248,7,254,31,224,31
 20344 DEFB 254,31,248,7,248,0,0,0
 20352 DEFB 0,0,0,7,248,24,6,24
 20360 DEFB 6,24,0,31,248,0,0,24
 20368 DEFB 6,24,6,0,96,24,6,31
 20376 DEFB 248,24,6,7,248,0,0,0
 20384 DEFB 0,0,0,24,6,24,0,24
 20392 DEFB 6,24,6,24,0,0,0,24
 20400 DEFB 24,24,6,0,96,24,24,24
 20408 DEFB 0,24,24,24,6,0,0,0
 20416 DEFB 0,0,0,0,0,0,0,0
 20424 DEFB 0,0,0,0,0,0,0,0
 20432 DEFB 0,0,0,0,0,0,0,0
 20440 DEFB 0,0,0,0,0,0,0,0
 20448 DEFB 0,0,0,0,0,0,0,0
 20456 DEFB 0,0,0,0,0,0,0,0
 20464 DEFB 0,0,0,0,0,0,0,0
 20472 DEFB 0,0,0,0,0,0,0,0
 20480 DEFB 0,0,0,0,0,0,0,0
 20488 DEFB 0,0,0,0,0,0,0,0
 20496 DEFB 0,0,0,0,0,0,0,0
 20504 DEFB 0,0,0,0,0,0,0,0
 20512 DEFB 0,0,0,0,0,0,0,0
 20520 DEFB 0,0,0,0,0,0,0,0
 20528 DEFB 0,0,0,0,0,0,0,0
 20536 DEFB 0,0,0,0,0,0,0,0
 20544 DEFB 0,0,0,0,0,0,0,0
 20552 DEFB 0,0,0,0,0,0,0,0
 20560 DEFB 0,0,0,0,0,0,0,0
 20568 DEFB 0,0,0,0,0,0,0,0
 20576 DEFB 0,0,0,0,0,0,0,0
 20584 DEFB 0,0,0,0,0,0,0,0
 20592 DEFB 0,0,0,0,0,0,0,0
 20600 DEFB 0,0,0,0,0,0,0,0
 20608 DEFB 0,0,0,0,0,0,0,0
 20616 DEFB 0,0,0,0,0,0,0,0
 20624 DEFB 0,0,0,0,0,0,0,0
 20632 DEFB 0,0,0,0,0,0,0,0
 20640 DEFB 0,0,0,0,0,0,0,0
 20648 DEFB 60,0,0,0,0,0,0,0
 20656 DEFB 0,0,0,0,0,0,0,0
 20664 DEFB 0,0,0,0,0,0,0,0
 20672 DEFB 0,0,0,0,0,0,0,0
 20680 DEFB 0,0,0,0,0,0,0,0
 20688 DEFB 0,0,0,0,0,0,0,0
 20696 DEFB 0,0,0,0,0,0,0,0
 20704 DEFB 0,0,0,0,0,0,0,0
 20712 DEFB 0,0,0,0,0,0,0,0
 20720 DEFB 0,0,0,0,0,0,0,0
 20728 DEFB 0,0,0,0,0,0,0,0
 20736 DEFB 0,0,0,0,0,0,0,0
 20744 DEFB 0,0,0,0,0,0,0,0
 20752 DEFB 0,0,0,0,0,0,0,0
 20760 DEFB 0,0,0,0,0,0,0,0
 20768 DEFB 0,0,0,0,0,0,0,0
 20776 DEFB 0,0,0,0,0,0,0,0
 20784 DEFB 0,0,0,0,0,0,0,0
 20792 DEFB 0,0,0,0,0,0,0,0
 20800 DEFB 0,0,0,0,0,0,0,0
 20808 DEFB 0,0,0,0,0,0,0,0
 20816 DEFB 0,0,0,0,0,0,0,0
 20824 DEFB 0,0,0,0,0,0,0,0
 20832 DEFB 64,60,60,120,62,66,60,0
 20840 DEFB 64,0,0,0,0,0,0,0
 20848 DEFB 0,0,0,16,0,0,0,0
 20856 DEFB 0,0,0,0,16,0,0,0
 20864 DEFB 0,0,0,0,0,0,0,0
 20872 DEFB 0,0,0,0,0,0,0,0
 20880 DEFB 0,0,0,0,0,0,0,0
 20888 DEFB 0,0,0,0,0,0,0,0
 20896 DEFB 0,0,0,0,0,0,0,0
 20904 DEFB 66,0,24,60,60,60,0,124
 20912 DEFB 0,16,0,0,0,64,16,4
 20920 DEFB 0,0,0,0,0,0,0,0
 20928 DEFB 0,0,0,0,0,0,0,0
 20936 DEFB 0,0,0,0,0,0,0,0
 20944 DEFB 0,0,0,0,0,0,0,0
 20952 DEFB 0,0,0,0,0,0,0,0
 20960 DEFB 0,0,0,0,0,0,0,0
 20968 DEFB 0,0,0,0,0,0,0,0
 20976 DEFB 0,0,0,0,0,0,0,0
 20984 DEFB 0,0,0,0,0,0,0,0
 20992 DEFB 0,0,0,0,0,0,0,0
 21000 DEFB 0,0,0,0,0,0,0,0
 21008 DEFB 0,0,0,0,0,0,0,0
 21016 DEFB 0,0,0,0,0,0,0,0
 21024 DEFB 0,0,0,0,0,0,0,0
 21032 DEFB 0,0,0,0,0,0,0,0
 21040 DEFB 0,0,0,0,0,0,0,0
 21048 DEFB 0,0,0,0,0,0,0,0
 21056 DEFB 0,0,0,0,0,0,0,0
 21064 DEFB 0,0,0,0,0,0,0,0
 21072 DEFB 0,0,0,0,0,0,0,0
 21080 DEFB 0,0,0,0,0,0,0,0
 21088 DEFB 64,66,66,68,8,98,66,0
 21096 DEFB 64,56,56,68,56,0,68,56
 21104 DEFB 68,28,0,56,56,120,56,0
 21112 DEFB 28,68,120,120,0,120,60,0
 21120 DEFB 0,0,0,0,0,0,0,0
 21128 DEFB 0,0,0,0,0,0,0,0
 21136 DEFB 0,0,0,0,0,0,0,0
 21144 DEFB 0,0,0,0,0,0,0,0
 21152 DEFB 0,0,0,0,0,0,0,0
 21160 DEFB 153,0,40,66,66,66,0,66
 21168 DEFB 56,0,56,120,0,64,56,4
 21176 DEFB 0,0,0,0,0,0,0,0
 21184 DEFB 0,0,0,0,0,0,0,0
 21192 DEFB 0,0,0,0,0,0,0,0
 21200 DEFB 0,0,0,0,0,0,0,0
 21208 DEFB 0,0,0,0,0,0,0,0
 21216 DEFB 0,0,0,0,0,0,0,0
 21224 DEFB 0,0,0,0,0,0,0,0
 21232 DEFB 0,0,0,0,0,0,0,0
 21240 DEFB 0,0,0,0,0,0,0,0
 21248 DEFB 0,0,0,0,0,0,0,0
 21256 DEFB 0,0,0,0,0,0,0,0
 21264 DEFB 0,0,0,0,0,0,0,0
 21272 DEFB 0,0,0,0,0,0,0,0
 21280 DEFB 0,0,0,0,0,0,0,0
 21288 DEFB 0,0,0,0,0,0,0,0
 21296 DEFB 0,0,0,0,0,0,0,0
 21304 DEFB 0,0,0,0,0,0,0,0
 21312 DEFB 0,0,0,0,0,0,0,0
 21320 DEFB 0,0,0,0,0,0,0,0
 21328 DEFB 0,0,0,0,0,0,0,0
 21336 DEFB 0,0,0,0,0,0,0,0
 21344 DEFB 64,66,66,66,8,82,64,0
 21352 DEFB 64,68,4,68,68,0,68,68
 21360 DEFB 68,32,0,16,4,68,68,0
 21368 DEFB 32,68,68,68,48,68,68,0
 21376 DEFB 0,0,0,0,0,0,0,0
 21384 DEFB 0,0,0,0,0,0,0,0
 21392 DEFB 0,0,0,0,0,0,0,0
 21400 DEFB 0,0,0,0,0,0,0,0
 21408 DEFB 0,0,0,0,0,0,0,0
 21416 DEFB 161,0,8,66,60,2,0,66
 21424 DEFB 64,48,68,68,0,64,16,60
 21432 DEFB 0,0,0,0,0,0,0,0
 21440 DEFB 0,0,0,0,0,0,0,0
 21448 DEFB 0,0,0,0,0,0,0,0
 21456 DEFB 0,0,0,0,0,0,0,0
 21464 DEFB 0,0,0,0,0,0,0,0
 21472 DEFB 0,0,0,0,0,0,0,0
 21480 DEFB 0,0,0,0,0,0,0,0
 21488 DEFB 0,0,0,0,0,0,0,0
 21496 DEFB 0,0,0,0,0,0,0,0
 21504 DEFB 0,0,0,0,0,0,0,0
 21512 DEFB 0,0,0,0,0,0,0,0
 21520 DEFB 0,0,0,0,0,0,0,0
 21528 DEFB 0,0,0,0,0,0,0,0
 21536 DEFB 0,0,0,0,0,0,0,0
 21544 DEFB 0,0,0,0,0,0,0,0
 21552 DEFB 0,0,0,0,0,0,0,0
 21560 DEFB 0,0,0,0,0,0,0,0
 21568 DEFB 0,0,0,0,0,0,0,0
 21576 DEFB 0,0,0,0,0,0,0,0
 21584 DEFB 0,0,0,0,0,0,0,0
 21592 DEFB 0,0,0,0,0,0,0,0
 21600 DEFB 64,66,126,66,8,74,78,62
 21608 DEFB 64,120,60,40,120,0,68,68
 21616 DEFB 68,32,0,16,60,68,120,0
 21624 DEFB 32,68,68,68,16,68,68,0
 21632 DEFB 0,0,0,0,0,0,0,0
 21640 DEFB 0,0,0,0,0,0,0,0
 21648 DEFB 0,0,0,0,0,0,0,0
 21656 DEFB 0,0,0,0,0,0,0,0
 21664 DEFB 0,0,0,0,0,0,0,0
 21672 DEFB 161,0,8,62,66,60,0,124
 21680 DEFB 56,16,68,68,0,64,16,68
 21688 DEFB 0,0,0,0,0,0,0,0
 21696 DEFB 0,0,0,0,0,0,0,0
 21704 DEFB 0,0,0,0,0,0,0,0
 21712 DEFB 0,0,0,0,0,0,0,0
 21720 DEFB 0,0,0,0,0,0,0,0
 21728 DEFB 0,0,0,0,0,0,0,0
 21736 DEFB 0,0,0,0,0,0,0,0
 21744 DEFB 0,0,0,0,0,0,0,0
 21752 DEFB 0,0,0,0,0,0,0,0
 21760 DEFB 0,0,0,0,0,0,0,0
 21768 DEFB 0,0,0,0,0,0,0,0
 21776 DEFB 0,0,0,0,0,0,0,0
 21784 DEFB 0,0,0,0,0,0,0,0
 21792 DEFB 0,0,0,0,0,0,0,0
 21800 DEFB 0,0,0,0,0,0,0,0
 21808 DEFB 0,0,0,0,0,0,0,0
 21816 DEFB 0,0,0,0,0,0,0,0
 21824 DEFB 0,0,0,0,0,0,0,0
 21832 DEFB 0,0,0,0,0,0,0,0
 21840 DEFB 0,0,0,0,0,0,0,0
 21848 DEFB 0,0,0,0,0,0,0,0
 21856 DEFB 64,66,66,68,8,70,66,0
 21864 DEFB 64,64,68,40,64,0,60,68
 21872 DEFB 68,32,0,16,68,120,64,0
 21880 DEFB 32,68,68,68,16,68,60,0
 21888 DEFB 0,0,0,0,0,0,0,0
 21896 DEFB 0,0,0,0,0,0,0,0
 21904 DEFB 0,0,0,0,0,0,0,0
 21912 DEFB 0,0,0,0,0,0,0,0
 21920 DEFB 0,0,0,0,0,0,0,0
 21928 DEFB 153,0,8,2,66,64,0,64
 21936 DEFB 4,16,68,68,0,64,16,68
 21944 DEFB 24,0,0,0,0,0,0,0
 21952 DEFB 0,0,0,0,0,0,0,0
 21960 DEFB 0,0,0,0,0,0,0,0
 21968 DEFB 0,0,0,0,0,0,0,0
 21976 DEFB 0,0,0,0,0,0,0,0
 21984 DEFB 0,0,0,0,0,0,0,0
 21992 DEFB 0,0,0,0,0,0,0,0
 22000 DEFB 0,0,0,0,0,0,0,0
 22008 DEFB 0,0,0,0,0,0,0,0
 22016 DEFB 0,0,0,0,0,0,0,0
 22024 DEFB 0,0,0,0,0,0,0,0
 22032 DEFB 0,0,0,0,0,0,0,0
 22040 DEFB 0,0,0,0,0,0,0,0
 22048 DEFB 0,0,0,0,0,0,0,0
 22056 DEFB 0,0,0,0,0,0,0,0
 22064 DEFB 0,0,0,0,0,0,0,0
 22072 DEFB 0,0,0,0,0,0,0,0
 22080 DEFB 0,0,0,0,0,0,0,0
 22088 DEFB 0,0,0,0,0,0,0,0
 22096 DEFB 0,0,0,0,0,0,0,0
 22104 DEFB 0,0,0,0,0,0,0,0
 22112 DEFB 126,60,66,120,62,66,60,0
 22120 DEFB 126,60,60,16,60,0,4,56
 22128 DEFB 56,32,0,12,60,64,60,0
 22136 DEFB 32,56,68,68,56,68,4,0
 22144 DEFB 0,0,0,0,0,0,0,0
 22152 DEFB 0,0,0,0,0,0,0,0
 22160 DEFB 0,0,0,0,0,0,0,0
 22168 DEFB 0,0,0,0,0,0,0,0
 22176 DEFB 0,0,0,0,0,0,0,0
 22184 DEFB 66,0,62,60,60,126,0,64
 22192 DEFB 120,56,56,68,0,126,12,60
 22200 DEFB 24,0,0,0,0,0,0,0
 22208 DEFB 0,0,0,0,0,0,0,0
 22216 DEFB 0,0,0,0,0,0,0,0
 22224 DEFB 0,0,0,0,0,0,0,0
 22232 DEFB 0,0,0,0,0,0,0,0
 22240 DEFB 0,0,0,0,0,0,0,0
 22248 DEFB 0,0,0,0,0,0,0,0
 22256 DEFB 0,0,0,0,0,0,0,0
 22264 DEFB 0,0,0,0,0,0,0,0
 22272 DEFB 0,0,0,0,0,0,0,0
 22280 DEFB 0,0,0,0,0,0,0,0
 22288 DEFB 0,0,0,0,0,0,0,0
 22296 DEFB 0,0,0,0,0,0,0,0
 22304 DEFB 0,0,0,0,0,0,0,0
 22312 DEFB 0,0,0,0,0,0,0,0
 22320 DEFB 0,0,0,0,0,0,0,0
 22328 DEFB 0,0,0,0,0,0,0,0
 22336 DEFB 0,0,0,0,0,0,0,0
 22344 DEFB 0,0,0,0,0,0,0,0
 22352 DEFB 0,0,0,0,0,0,0,0
 22360 DEFB 0,0,0,0,0,0,0,0
 22368 DEFB 0,0,0,0,0,0,0,0
 22376 DEFB 0,0,0,0,0,0,56,0
 22384 DEFB 0,0,0,0,0,64,0,0
 22392 DEFB 0,0,0,0,0,0,56,0
 22400 DEFB 0,0,0,0,0,0,0,0
 22408 DEFB 0,0,0,0,0,0,0,0
 22416 DEFB 0,0,0,0,0,0,0,0
 22424 DEFB 0,0,0,0,0,0,0,0
 22432 DEFB 0,0,0,0,0,0,0,0
 22440 DEFB 60,0,0,0,0,0,0,0
 22448 DEFB 0,0,0,0,0,0,0,0
 22456 DEFB 0,0,0,0,0,0,0,0
 22464 DEFB 0,0,0,0,0,0,0,0
 22472 DEFB 0,0,0,0,0,0,0,0
 22480 DEFB 0,0,0,0,0,0,0,0
 22488 DEFB 0,0,0,0,0,0,0,0
 22496 DEFB 0,0,0,0,0,0,0,0
 22504 DEFB 0,0,0,0,0,0,0,0
 22512 DEFB 0,0,0,0,0,0,0,0
 22520 DEFB 0,0,0,0,0,0,0,0
 22528 DEFB 14,14,14,14,14,14,14,14
 22536 DEFB 14,14,14,14,14,14,14,14
 22544 DEFB 14,14,14,14,14,14,14,14
 22552 DEFB 14,14,14,14,14,14,14,14
 22560 DEFB 14,14,14,14,14,14,14,14
 22568 DEFB 14,14,14,14,14,14,14,14
 22576 DEFB 14,14,14,14,14,14,14,14
 22584 DEFB 14,14,14,14,14,14,14,14
 22592 DEFB 14,14,14,14,14,14,14,14
 22600 DEFB 14,14,14,14,14,14,14,14
 22608 DEFB 14,14,14,14,14,14,14,14
 22616 DEFB 14,14,14,14,14,14,14,14
 22624 DEFB 9,9,9,9,9,9,9,9
 22632 DEFB 9,9,9,9,9,9,9,9
 22640 DEFB 9,14,14,14,14,14,14,14
 22648 DEFB 14,14,14,14,14,14,14,14
 22656 DEFB 14,14,14,14,14,14,14,14
 22664 DEFB 14,14,14,14,14,14,14,14
 22672 DEFB 14,14,14,14,14,14,14,14
 22680 DEFB 14,14,14,14,14,14,14,14
 22688 DEFB 14,14,14,14,14,14,14,14
 22696 DEFB 14,14,14,12,12,12,12,12
 22704 DEFB 12,12,14,14,14,14,14,14
 22712 DEFB 14,14,14,14,14,14,14,14
 22720 DEFB 14,14,14,14,14,14,14,14
 22728 DEFB 14,14,14,12,12,12,12,12
 22736 DEFB 12,12,14,14,14,14,14,14
 22744 DEFB 14,14,14,14,14,14,14,14
 22752 DEFB 14,14,14,14,14,14,14,14
 22760 DEFB 14,14,14,12,12,12,12,12
 22768 DEFB 12,12,14,14,14,14,14,14
 22776 DEFB 14,14,14,14,14,14,14,14
 22784 DEFB 14,14,14,14,14,14,14,14
 22792 DEFB 14,14,14,12,12,12,12,12
 22800 DEFB 12,12,14,14,14,14,14,14
 22808 DEFB 14,14,14,14,14,14,14,14
 22816 DEFB 14,14,14,14,14,14,14,14
 22824 DEFB 14,14,14,12,12,12,12,12
 22832 DEFB 12,12,14,14,14,14,14,14
 22840 DEFB 14,14,14,14,14,14,14,14
 22848 DEFB 14,14,14,14,14,14,14,14
 22856 DEFB 14,14,14,12,12,12,12,12
 22864 DEFB 12,12,14,14,14,14,14,14
 22872 DEFB 14,14,14,14,14,14,14,14
 22880 DEFB 14,14,14,13,13,13,13,13
 22888 DEFB 13,13,13,13,13,13,13,13
 22896 DEFB 13,13,13,13,13,13,13,13
 22904 DEFB 13,13,13,13,13,13,14,14
 22912 DEFB 14,14,14,13,13,13,13,13
 22920 DEFB 13,13,13,13,13,13,13,13
 22928 DEFB 13,13,13,13,13,13,13,13
 22936 DEFB 13,13,13,13,13,13,14,14
 22944 DEFB 14,14,14,13,13,13,13,13
 22952 DEFB 13,13,13,13,13,13,13,13
 22960 DEFB 13,13,13,13,13,13,13,13
 22968 DEFB 13,13,13,13,13,13,14,14
 22976 DEFB 14,14,14,13,13,13,13,13
 22984 DEFB 13,13,13,13,13,13,13,13
 22992 DEFB 13,13,13,13,13,13,13,13
 23000 DEFB 13,13,13,13,13,13,14,14
 23008 DEFB 14,14,14,13,13,13,13,13
 23016 DEFB 13,13,13,13,13,13,13,13
 23024 DEFB 13,13,13,13,13,13,13,13
 23032 DEFB 13,13,13,13,13,13,14,14
 23040 DEFB 14,14,14,14,14,14,14,14
 23048 DEFB 14,14,14,14,14,14,14,14
 23056 DEFB 14,14,14,14,14,14,14,14
 23064 DEFB 14,14,14,14,14,14,14,14
 23072 DEFB 14,14,14,14,14,14,14,14
 23080 DEFB 14,14,14,14,14,14,14,14
 23088 DEFB 14,14,14,14,14,14,14,14
 23096 DEFB 14,14,14,14,14,14,14,14
 23104 DEFB 14,14,14,14,14,14,14,14
 23112 DEFB 14,14,14,14,14,14,14,14
 23120 DEFB 14,14,14,14,14,14,14,14
 23128 DEFB 14,14,14,14,14,14,14,14
 23136 DEFB 142,142,142,142,142,142,142,14
 23144 DEFB 14,14,14,14,14,14,14,14
 23152 DEFB 14,14,14,14,14,14,14,14
 23160 DEFB 14,14,14,14,14,14,14,14
 23168 DEFB 14,14,14,14,14,14,14,14
 23176 DEFB 14,14,14,14,14,14,14,14
 23184 DEFB 14,14,14,14,14,14,14,14
 23192 DEFB 14,14,14,14,14,14,14,14
 23200 DEFB 14,14,14,14,14,14,14,14
 23208 DEFB 14,14,14,14,14,14,14,14
 23216 DEFB 14,14,14,14,14,14,14,14
 23224 DEFB 14,14,14,14,14,14,14,14
 23232 DEFB 15,15,15,15,15,15,15,15
 23240 DEFB 15,15,15,15,15,15,15,15
 23248 DEFB 15,15,15,15,15,15,15,15
 23256 DEFB 15,15,15,15,15,15,15,15
 23264 DEFB 15,15,15,15,15,15,15,15
 23272 DEFB 15,15,15,15,15,15,15,15
 23280 DEFB 15,15,15,15,15,15,15,15
 23288 DEFB 15,15,15,15,15,15,15,15
 23296 DEFB 0,0,0,0,0,0,0,0
 23304 DEFB 0,0,0,0,0,0,0,0
 23312 DEFB 0,0,0,0,0,0,0,0
 23320 DEFB 0,0,0,0,0,0,0,0
 23328 DEFB 0,0,0,0,0,0,0,0
 23336 DEFB 0,0,0,0,0,0,0,0
 23344 DEFB 0,0,0,0,0,0,0,0
 23352 DEFB 0,0,0,0,0,0,0,0
 23360 DEFB 0,0,0,0,0,0,0,0
 23368 DEFB 0,0,0,0,0,0,0,0
 23376 DEFB 0,0,0,0,0,0,0,0
 23384 DEFB 0,0,0,0,0,0,0,0
 23392 DEFB 0,0,0,0,0,0,0,0
 23400 DEFB 0,0,0,0,0,0,0,0
 23408 DEFB 0,0,0,0,0,0,0,0
 23416 DEFB 0,0,0,0,0,0,0,0
 23424 DEFB 0,0,0,0,0,0,0,0
 23432 DEFB 0,0,0,0,0,0,0,0
 23440 DEFB 0,0,0,0,0,0,0,0
 23448 DEFB 0,0,0,0,0,0,0,0
 23456 DEFB 0,0,0,0,0,0,0,0
 23464 DEFB 0,0,0,0,0,0,0,0
 23472 DEFB 0,0,0,0,0,0,0,0
 23480 DEFB 0,0,0,0,0,0,0,0
 23488 DEFB 0,0,0,0,0,0,0,0
 23496 DEFB 0,0,0,0,0,0,0,0
 23504 DEFB 0,0,0,0,0,0,0,0
 23512 DEFB 0,0,0,0,0,0,0,0
 23520 DEFB 0,0,0,0,0,0,0,0
 23528 DEFB 0,0,0,0,0,0,0,0
 23536 DEFB 0,0,0,0,0,0,0,0
 23544 DEFB 0,0,0,0,0,0,0,0
 23552 DEFB 255,0,35,13,255,0,35,34
 23560 DEFB 13,35,5,0,0,0,16,0
 23568 DEFB 1,0,6,0,11,0,1,0
 23576 DEFB 1,0,6,0,16,0,0,0
 23584 DEFB 0,0,0,0,0,0,0,0
 23592 DEFB 0,0,0,0,0,0,0,0
 23600 DEFB 0,0,0,0,0,0
; Default font is in the ROM. This points to $3C00, whereas the ROM's char set
; is at $3D00. The ROM starts with space (char 32) so this points 32*8 before
; the actual char data.
@label=_CURRENT_FONT
 23606 DEFB 0
 23607 DEFB 60
 23608 DEFB 64,0,255,205,0,177,95,0
 23616 DEFB 0,0,10,0,255,10,0,7

; Port 254 shadow
@label=_PORT254_SHADOW
b23624 DEFS 1,15
 23625 DEFB 0,0,15,93,0,0,182,92
 23633 DEFB 187,92,203,92,15,93,202
 23640 DEFB 92
 23641 DEFB 16,93,19,93,14

; Message at 23646
t23646 DEFM "]j]"

; Data block at 23649
b23649 DEFB 21,93,21,93,21,93,45,146
 23657 DEFB 92,0,2,0,0,0,0,0
 23665 DEFB 0,0,0,182,26,0,0,22
 23673 DEFB 0,0,88,255,0,0,33,0
 23681 DEFB 91,33,23,128,64,224,80,33
 23689 DEFB 20,33,23,3,9,0,9,0
 23697 DEFB 0,0,0,0,0,0,0,0
 23705 DEFB 0,0,0,0,0,0,0,0
 23713 DEFB 0,0,0,0,0,0,0,0
 23721 DEFB 0,0,0,0,0,0,0,0
 23729 DEFB 0,180,95,255,255,244,9,168
 23737 DEFB 16,75,244,9,196,21,83,129
 23745 DEFB 15,196,21,82,244,9,196,21
 23753 DEFB 80,128,0,10,64,0,231,49
 23761 DEFB 14,0,0,1,0,0,58,218
 23769 DEFB 49,14,0,0,1,0,0,58
 23777 DEFB 217,49,14,0,0,1,0,0
 23785 DEFB 58,253

; Message at 23787
t23787 DEFM "24500"

; Data block at 23792
b23792 DEFB 14,0,0,180,95,0,58,239
 23800 DEFB 34,34,170,58,239,34,34,175
 23808 DEFB 58,249,192

; Message at 23811
t23811 DEFM "24703"

; Data block at 23816
b23816 DEFB 14,0,0,127,96,0,13,128
 23824 DEFB 239,34,34,13,128,0,0,127
 23832 DEFB 96,0

; Message at 23834
t23834 DEFM "      "

; Data block at 23840
b23840 DEFB 0,0,0,0,0,0,3

; Message at 23847
t23847 DEFM "C         "

; Data block at 23857
b23857 DEFB 180,30,0,96,0,128,0,0
 23865 DEFB 0,0,0,0,0,0,0,0
 23873 DEFB 0,0,0,0,0,0,0,0
 23881 DEFB 0,0,0,0,0,0,0,0
 23889 DEFB 0,0,0,0,0,0,0,0
 23897 DEFB 0,0,0,0,0,0,0,0
 23905 DEFB 0,0,0,0,0,0,0,0
 23913 DEFB 0,0,0,0,0,0,0,0
 23921 DEFB 0,0,0,0,0,0,0,0
 23929 DEFB 0,0,0,0,0,0,0,0
 23937 DEFB 0,0,0,0,0,0,0,0
 23945 DEFB 0,0,0,0,0,0,0,0
 23953 DEFB 0,0,0,0,0,0,0,0
 23961 DEFB 0,0,0,0,0,0,0,0
 23969 DEFB 0,0,0,0,0,0,0,0
 23977 DEFB 0,0,0,0,0,0,0,0
 23985 DEFB 0,0,0,0,0,0,0,0
 23993 DEFB 0,0,0,0,0,0,0,0
 24001 DEFB 0,0,0,0,0,0,0,0
 24009 DEFB 0,0,0,0,0,0,0,0
 24017 DEFB 0,0,0,0,0,0,0,0
 24025 DEFB 0,0,0,0,0,0,0,0
 24033 DEFB 0,0,0,0,0,0,0,0
 24041 DEFB 0,0,0,0,0,0,0,0
 24049 DEFB 0,0,0,0,0,0,0,0
 24057 DEFB 0,0,0,0,0,0,0,0
 24065 DEFB 0,0,0,0,0,0,0,0
 24073 DEFB 0,0,0,0,0,0,0,0
 24081 DEFB 0,0,0,0,0,0,0,0
 24089 DEFB 0,0,0,0,0,0,0,0
 24097 DEFB 0,0,0,0,0,0,0,0
 24105 DEFB 0,0,0,0,0,0,0,0
 24113 DEFB 0,0,0,0,0,0,0,0
 24121 DEFB 0,0,0,0,0,0,0,0
 24129 DEFB 0,0,0,0,0,0,0,0
 24137 DEFB 0,0,0,0,0,0,0,0
 24145 DEFB 0,0,0,0,0,0,0,0
 24153 DEFB 0,0,0,0,0,0,0,0
 24161 DEFB 0,0,0,0,0,0,0,0
 24169 DEFB 0,0,0,0,0,0,0,0
 24177 DEFB 0,0,0,0,0,0,0,0
 24185 DEFB 0,0,0,0,0,0,0,0
 24193 DEFB 0,0,0,0,0,0,0,0
 24201 DEFB 0,0,0,0,0,0,0,0
 24209 DEFB 0,0,0,0,0,0,0,0
 24217 DEFB 0,0,0,0,0,0,0,0
 24225 DEFB 0,0,0,0,0,0,0,0
 24233 DEFB 0,0,0,0,0,0,0,0
 24241 DEFB 0,0,0,0,0,0,0,0
 24249 DEFB 0,0,0,0,0,0,0,0
 24257 DEFB 0,0,0,0,0,0,0,0
 24265 DEFB 0,0,0,0,0,0,0,0
 24273 DEFB 0,0,0,0,0,0,0,0
 24281 DEFB 0,0,0,0,0,0,0,0
 24289 DEFB 0,0,0,0,0,0,0,0
 24297 DEFB 0,0,0,0,0,0,0,0
 24305 DEFB 0,0,0,0,0,0,0,0
 24313 DEFB 0,0,0,0,0,0,0,0
 24321 DEFB 0,0,0,0,0,0,0,0
 24329 DEFB 0,0,0,0,0,0,0,0
 24337 DEFB 0,0,0,0,0,0,0,0
 24345 DEFB 0,0,0,0,0,0,0,0
 24353 DEFB 0,0,0,0,0,0,0,0
 24361 DEFB 0,0,0,0,0,0,0,0
 24369 DEFB 0,0,0,0,0,0,0,0
 24377 DEFB 0,0,0,0,0,0,0,0
 24385 DEFB 0,0,0,0,0,0,0,0
 24393 DEFB 0,0,0,0,0,0,0,0
 24401 DEFB 0,0,0,0,0,0,0,0
 24409 DEFB 0,0,0,0,0,0,0,0
 24417 DEFB 0,0,0,0,0,0,0,0
 24425 DEFB 0,0,0,0,0,0,0,0
 24433 DEFB 0,0,0,0,0,0,0,0
 24441 DEFB 0,0,0,0,0,0,0,0
 24449 DEFB 0,0,0,0,0,0,0,0
 24457 DEFB 0,0,0,0,0,0,0,0
 24465 DEFB 219,2,243,13,183,45,21,93
 24473 DEFB 16,93,127,96

; Message at 24477
t24477 DEFM "+-e3"

; Data block at 24481
b24481 DEFB 127,16,237,16,13,0,9,0
 24489 DEFB 133,28,16,28,82,27,118,27
 24497 DEFB 3,19,0,62,0,0,0,0
 24505 DEFB 0,0,0,0,0,0,0,0
 24513 DEFB 0,0,0,0,0,0,0,0
 24521 DEFB 0,0,0,0,0,0,0,0
 24529 DEFB 0,0,0,0,0,0,0,0
 24537 DEFB 0,0,0,0,0,0,0,0
 24545 DEFB 0,0,0,0,0,0,0,0
 24553 DEFB 0,0,0,0,0,0,0,0
 24561 DEFB 0,0,0,0,0,0,0,0
 24569 DEFB 0,0,0,0,0,0,0,33
 24577 DEFB 156,126,17,0,96,183,237

; Message at 24584
t24584 DEFM "RDM!"

; Data block at 24588
b24588 DEFB 0,128,237,176,201
; This one is used to initialise the screen. The lives ships on the top row and
; barriers are cyan on black. It never changes during the game.
@label=_SCREEN_ATT_CYAN_ON_BLACK
 24593 DEFB 5
@label=_ALIEN_COLOUR_BANDS
 24594 DEFB 6,4,4,2,2       ; Yellow, green, green, red, red
; This one is the colour for the player ship row
@label=SCREEN_ATT_WHITE_ON_BLACK
 24599 DEFB 7
; This one is the colour for the spaceship row
@label=SCREEN_ATT_MAGENTA_ON_BLACK
 24600 DEFB 3
@label=_HIGH_SCORE
 24601 DEFB 0
 24602 DEFB 0
; Current score divided by 10. So 20 if the score is 200.
@label=_CURRENT_SCORE
 24603 DEFW 0

; Game runtime data
@label=_GAME_RUNTIME_DATA
@label=_SPACESHIP_SPEED_FACTOR
b24605 DEFB 5        ; Speed factor to compensate when there's a spaceship to be drawn
@label=_PLAYER_SPEED_FACTOR
 24606 DEFB 5        ; Speed factor to compensate when the player's ship needs to move
@label=_BULLET_SPEED_FACTOR
 24607 DEFB 5        ; Speed factor to compensate when the bullet is in flight
@label=_NUMBER_OF_SCREENS_COMPLETED
 24608 DEFB 0        ; starts off as 0, inc'ed to 1 at first game start
@label=_EXTRA_LIFE_AWARDED
 24609 DEFB 0
; Barriers suppressed flag. This starts off zero so the barriers get drawn, but
; then goes 1 so they don't get drawn again each new screen.
@label=_BARRIERS_SUPPRESSED
 24610 DEFB 0
@label=_LIVES_REMAINING
 24611 DEFB 0        ; Number of lives player has left
@label=_MORE_THAN9_SCREEN_COMPLETED
 24612 DEFB 0        ; some of sort of counter above 9 and below 50
@label=_ALIENS_LANDED
 24613 DEFB 0
@label=_ALIENS_SOMETHING
 24614 DEFB 0        ; ???

@label=_NUM_ALIENS_REMAINING
b24615 DEFB 0
 24616 DEFB 114,121,230,128
 24620 DEFB 194,28,115,58,246,140,230,128
 24628 DEFB 202,39,115,205
@label=_ALIEN_COLOUR_BAND_ARG
 24632 DEFB 0
 24633 DEFB 0
@label=_COLL_CHECK_SOMETHING
 24634 DEFB 0
 24635 DEFB 0
 24636 DEFB 0,0
@label=_PLAYER_XPOS
 24638 DEFB 0                             ; Player ship pos, X
@label=_PLAYER_YPOS
 24639 DEFB 0                             ; Player ship pos, Y
@label=_YPOS_ADJUST
 24640 DEFB 0                             ; Player ship adjustment, -1, 0 or +1
@label=_PLAYER_BULLET_IN_FLIGHT
 24641 DEFB 0
@label=_PLAYER_BULLET_XPOS
 24642 DEFB 0
@label=_PLAYER_BULLET_YPOS
 24643 DEFB 0
 24644 DEFB 115
 24645 DEFB 25,235,201,205,251,114,58
@label=_FIRE_PRESSED
 24652 DEFB 0
@label=_SPACESHIP_DIRECTION
 24653 DEFB 0

; Game initialisation data
@label=_GAME_INIT_DATA
b24654 DEFB 1        ; Speed factor
 24655 DEFB 1
 24656 DEFB 1
 24657 DEFB 0        ; Extra life has been awarded flag
 24658 DEFB 0        ; Suppress barrier drawing
 24659 DEFB 0
 24660 DEFB 3        ; Number of lives player starts with
 24661 DEFB 5
 24662 DEFB 0
 24663 DEFB 0

; Some sort of init block
;
; This 39 byte data block is copied from here to #R24615
; at the start of each game. I don't know what it is.
@label=_INIT_BLOCK_UNKNOWN
b24664 DEFB 55,11,11,11
 24668 DEFB 11,11,5,5,5,5,5,5
 24676 DEFB 5,5,5,5,5,0,0,4
 24684 DEFB 1,0,11,0,184,0,0,0
 24692 DEFB 0,0,0,0,0,0,0,0
 24700 DEFB 0,0,0

; Start of game, from LOADer and new game loop
;
; Used by the routine at #R25160.
@label=start
c24703 DI            ; start here
 24704 CALL 24823    ; Game data initialisation, copies 10 bytes
 24707 CALL 32287    ; Clear screen pixels
 24710 CALL 24989    ; Reset score, maybe update high score from last
                     ; High score is only updated when new game starts
                     ; which seems a tad unfair
 24713 CALL 25034    ; Draw lives as ships on top row
; This entry point is used by the routine at #R24919. Top of new screen loop?
@label=new_screen_loop
*24716 CALL 24835    ;
 24719 CALL 24806    ;
 24722 CALL 27030    ;
 24725 CALL 25228    ;
 24728 CALL 26965    ;
 24731 CALL 31436    ;
 24734 CALL 31075    ;
; This entry point is used by the routine at #R24868.
@label=game_loop
*24737 CALL 25105    ; Consider awarding extra life
 24740 CALL 25094    ; Update score shown onscreen
 24743 CALL 26566    ; Read keyboard, deal with ship and bullet repositioning
 24746 CALL 26038    ; Check if bullet has hit alien, kill alien if so
 24749 LD A,(24615)  ;
 24752 OR A          ;
 24753 JP Z,24919    ;
 24756 CALL 25708    ;
 24759 JR Z,24771    ;
 24761 LD A,(24611)  ; Lives remaining
 24764 OR A          ;
 24765 JP Z,25160    ;
 24768 CALL 25034    ;
*24771 CALL 25442    ;
 24774 CALL 24795    ;
 24777 LD A,(24611)  ; Lives remaining
 24780 OR A          ;
 24781 JP Z,25160    ;
 24784 LD A,(24613)  ; {Have the aliens landed? Game over if they have.
 24787 OR A          ;
 24788 JP NZ,25160   ; }
; Slight delay to keep speed consistent, then this jumps back to top of game loop
 24791 JP 24868      ;

; Storage byte for routine that follows
@label=_ALIENS_SPEED_CONTROL
s24794 DEFS 1

; Move aliens along, based on speed control value
;
; Used by the routine at #R24703.
@label=dec_timer_move_aliens
c24795 LD A,(24794)  ; {Pick up speed control, decrement it,
 24798 DEC A         ;  if it's not zero it's not yet time
 24799 LD (24794),A  ;  to move the aliens.
 24802 RET NZ        ; }
 24803 CALL 30857    ; Move aliens, drop through
; Aliens have been moved, now recalculate speed control based on how
; many are left. This puts a number in #R24794. The algorihm is
; SPEED_CONTROL = (NUM_LEFT/4 + NUM_LEFT/8) + 4
;.
; This entry point is used by the routine at #R24703.
@label=set_alien_speed
*24806 LD A,(24615)  ; How many are left?
 24809 SRL A         ; /2
 24811 SRL A         ; /4
 24813 LD B,A        ; Div by 4 in B
 24814 SRL A         ; /8
 24816 ADD A,B       ; div8 + div4
 24817 ADD A,4       ; +4
 24819 LD (24794),A  ; Result
 24822 RET           ;

; Reset game data
;
; Used by the routine at #R24703.
@label=reset_game_data
c24823 LD HL,24654   ; Initialisation data
 24826 LD DE,24605   ; Play data
 24829 LD BC,10      ; 10 bytes
 24832 LDIR          ; Copy to init a new game
 24834 RET           ;

; Routine at 24835
;
; Used by the routine at #R24703.
@label=init_of_some_sort
c24835 LD HL,24664   ; { Copy this block of data
 24838 LD DE,24615   ;   into what looks like the
 24841 LD BC,39      ;   game's rumtime data
 24844 LDIR          ; }
 24846 LD A,(24608)  ; { Pick up screen number.
 24849 INC A         ;   Increment
 24850 RET Z         ; }
 24851 LD (24608),A  ; Write it back
 24854 CP 50         ; Return if more than 50
 24856 RET NC        ;
 24857 CP 9          ; Return if less than 9
 24859 RET C         ;
 24860 LD A,(24612)  ; Inc this, don't know what it does
 24863 INC A         ; If screens completed is <9 or >50?
 24864 LD (24612),A  ;
 24867 RET           ;

; Dynamic pause
;
; Control the speed of animation by pausing when things aren't
; happening. So if there's no spaceship being animated we
; pause slightly to keep speed consistent with when there is
; a spaceship on screen. Same for when we need to animate the
; player's ship moving, and the player's bullet.
;.
; Used by the routine at #R24703.
@label=dynamic_pause
c24868 LD A,(24653)  ; {Is there a spaceship on screen? If there
 24871 OR A          ;  isn't we pause a moment to control speed.
 24872 JR NZ,24880   ;  If there is we skip that pause}
 24874 LD A,(24605)  ; Load A with speed factor
 24877 CALL 24908    ; Busy wait a multiple of 'A' states
*24880 LD A,(24640)  ; {Do we need to move and redraw the player
 24883 OR A          ;  ship this iteration? If not, we pause.
 24884 JR NZ,24892   ; }
 24886 LD A,(24606)  ; Load A with speed factor
 24889 CALL 24908    ; Busy wait a multiple of 'A' states
*24892 LD A,(24641)  ; {Is there a bullet is in flight?
 24895 OR A          ;  If not we need to pause here too.
 24896 JP NZ,24737   ; }
 24899 LD A,(24607)  ; Load A with speed factor
 24902 CALL 24908    ; Busy wait a multiple of 'A' states
 24905 JP 24737      ; Back to game loop

; delay_ms (approx)
;
; Busy wait routine, pauses around 4360 * 'A' Ts. One iteration is about 1.25ms
; on the 3.5MHz Z80.
;
; I:A Number of iterations to spin for
@label=delay_ms
c24908 LD B,A        ;
*24909 PUSH BC       ; 11 Ts
 24910 LD B,0        ; {256 NOPs 4 Ts 13Ts = ~4352 Ts
*24912 NOP           ;
 24913 DJNZ 24912    ; }
 24915 POP BC        ;
 24916 DJNZ 24909    ;
 24918 RET           ;

; Count up to 7, no higher
;
; Increments the number at 24614 up to 7, but no higher. Used by the routine at
; #R24703.
@label=count_to_7
c24919 LD A,(24614)  ;
 24922 INC A         ;
 24923 CP 8          ;
 24925 JR NZ,24928   ;
 24927 DEC A         ;
*24928 LD (24614),A  ;
 24931 JP 24716      ; Jump back into game loop???

@label=_DIGITS_LEFT_TO_PRINT
s24934 DEFS 1

; Print score
;
; Used by the routines at #R24989, #R25034 and #R25643.
;
; I:C cy
; I:B cx
; I:HL value to print (the score or high score)
; I:A number of digits
@label=print_score
c24935 LD (24934),A  ; Stash A
 24938 PUSH BC       ; Push cx,cy location to print at
 24939 CALL 32127    ; IX points to the 5 digits to print
 24942 LD A,(24934)  ; Recover A
 24945 NEG           ; 2s complement
 24947 ADD A,5       ; {If A is less than the assumed length
 24949 JR Z,24956    ;  of 5 digits we bump IX along to
*24951 INC IX        ;  reduce the length of the number
 24953 DEC A         ;  printed.
 24954 JR NZ,24951   ; }
*24956 LD A,(IX+0)   ; A contains digit to print
 24959 INC IX        ; Next digit
 24961 CALL 32159    ; HL points to UDG
 24964 POP BC        ; Retrieve x,y
 24965 LD D,B        ; {Use DE to add one to the
 24966 LD E,C        ; cx value, push ready for
 24967 INC E         ; next iteration, it's taken
 24968 PUSH DE       ; off by the POP BC}
 24969 CALL 32275    ; Print digit
 24972 LD A,(24934)  ; {One more done
 24975 DEC A         ;
 24976 LD (24934),A  ; }
 24979 JR NZ,24956   ; Back to print next digit
 24981 XOR A         ; {Find digit 0 and jump to
 24982 CALL 32159    ;  print it. Tags an extra
 24985 POP BC        ; '0' on the end, this is
 24986 JP 32275      ; the x10 multiplier!}

; Reset score, update high score
;
; Check #R24603 and copy it into #R24601 if it's greater.
; Zero #R24603 ready for next game and print the high
; score, including label, regardless of whether it got
; incremented.
;.
; Used by the routine at #R24703.
@label=reset_score_update_high
c24989 LD DE,(24603)  ; Current score in DE
 24993 LD HL,(24601)  ; High score in HL
 24996 OR A           ; Clear flags
 24997 SBC HL,DE      ; Subtract current from high
 24999 JR NC,25005    ; No carry means current less than high
 25001 LD (24601),DE  ; Carry, so copy current into high
*25005 LD HL,0        ; {Zero score ready for
 25008 LD (24603),HL  ; next game}
; This entry point is used by the routine at #R25034.
@label=print_high_score
*25011 CALL 32302     ; Print string which follows this instruction
 25014 DEFB 21,0      ; {Print HIGH top right
 25016 DEFM "HIGH ",0 ; }
 25022 LD BC,26       ; cy=0, cx=26
 25025 LD HL,(24601)  ; Pick up high score number
 25028 LD A,5         ; Length of 5 chars
 25030 JP 24935       ; Print it

; Temporary store for the counter of lives remaining to draw
@label=_DRAW_LIVES_REMAINING_COUNTER
s25033 DEFS 1

; Draw lives remaining on top row
;
; The player ship sprites are drawn and buzzed into position. This uses the
; same code as the regular ship drawing routine, including the ship position
; variables. So it needs to save the player xpos/ypos values, set them to top
; row and do the work, then put them back as they were.
;
; Used by the routines at #R24703 and #R25105.
@label=draw_lives_remaining
c25034 LD DE,16384   ; Select 0th row
 25037 CALL 26004    ; Clear it
 25040 LD A,(24611)  ; Pick up number of lives remaining
 25043 DEC A         ; We're going to draw one fewer than that
 25044 JR Z,25091    ; {Zero lives to draw, so skip drawing on the top row
 25046 JP M,25091    ; }
 25049 LD (25033),A  ; Stash away the counter. There's no obvious reason a PUSH
                     ; AF wouldn't work here. Shrug.
 25052 LD DE,(24638) ; {Current player ship pos, X and Y, stash on the stack
 25056 PUSH DE       ; }
 25057 XOR A         ; {Y=0
 25058 LD (24639),A  ; }
 25061 LD A,72       ; {X=72
 25063 LD (24638),A  ; }
*25066 CALL 26965    ; Draw a player ship and move it into position
 25069 LD A,(24638)  ; {Move X along one ship's width
 25072 ADD A,24      ;
 25074 LD (24638),A  ; }
 25077 LD A,(25033)  ; {Recover the lives to draw counter and decrement it
 25080 DEC A         ;
 25081 LD (25033),A  ; }
 25084 JR NZ,25066   ; Back to draw next ship
 25086 POP DE        ; {Restore the X,Y position which is the player's ship
 25087 LD (24638),DE ; }
*25091 CALL 25011    ; Update high score, drop through to update current score
; This entry point is used by the routine at #R24703.
@label=update_onscreen_score
*25094 LD HL,(24603) ; Pick up current score
 25097 LD BC,0       ; {Print it at 0,0
 25100 LD A,5        ;  5 digits wide
 25102 JP 24935      ;}

; Award extra life
;
; Used by the routine at #R24703.
@label=check_for_extra_life
c25105 LD A,(24609)                 ; {Check if extra life has been awarded.
 25108 OR A                         ; You only get the one.
 25109 RET NZ                       ; }
 25110 LD HL,(24603)                ; {If this goes greater than 100 then an
 25113 LD BC,100                    ; extra life is awarded. It's not the score
 25116 SBC HL,BC                    ; though.
 25118 RET C                        ; }
 25119 LD A,1                       ; {Set flag, no more extra lives
 25121 LD (24609),A                 ; }
 25124 LD A,(24611)                 ; {Add extra life
 25127 INC A                        ;
 25128 LD (24611),A                 ; }
 25131 LD B,8                       ;
; This entry point is used by the routine at #R25155.
*25133 LD A,(23624)                 ; Pick up port 254 shadow
 25136 ADD A,8                      ; Don't know what this is for
 25138 AND 56                       ; Null out bottom 3 bits - border black
 25140 LD (23624),A                 ; Put it back
 25143 CALL 31987                   ; Sound burbler
 25146 DEFB 12,40,18,30,24,20,48,10 ; {Extra life sound
 25154 DEFB 0                       ; }
 25155 DJNZ 25133                   ; {Sound burbler return point
 25157 JP 25034                     ; }

; Game over
;
; By the time it gets here the burbler has beeped to indicate the playe has
; been hit.
;
; Used by the routine at #R24703.
@label=game_over
c25160 CALL 32302                                     ; Print string which
                                                      ; follows this
                                                      ; instruction
 25163 DEFM 0,23,"GAME OVER       HIT FIRE TO PLAY",0 ;
; Return here, play siren for game over
 25198 LD B,25                                        ;
*25200 CALL 31987                                     ; Sound burbler
 25203 DEFB 40,50,40,40,40,30,40,20                   ; {Data for game over
 25211 DEFB 40,10,0                                   ; siren}
; Sound burbler return point
@label=game_over_siren
 25214 DJNZ 25200                                     ; Repeat x25
; Wait for fire to be pressed
*25216 CALL 26587                                     ; Read keyboard
 25219 LD A,(24652)                                   ; {Has fire pressed flag
 25222 OR A                                           ; gone true? If not, loop
 25223 JR Z,25216                                     ; back and read the
                                                      ; keyboard again}
 25225 JP 24703                                       ; Jump back to start of
                                                      ; main loop for new game

; Initialise game screen attributes
;
; Set screen attributes to black
; .
; Used by the routine at #R24703.
@label=init_attributes
c25228 LD A,(24593)   ; Pick up screen default attributes
; This entry point is used by the routine at #R25160.
 25231 AND 56         ; Mask out ink bits, leaving border same as screen paper
 25233 LD (23624),A   ; Copy into port 254 shadow
 25236 LD A,(24593)   ; Pick up screen default attributes again
; This entry point is used by the routine at #R25160.
 25239 LD BC,3        ; Writing 256*3 attributes.
 25242 LD HL,22528    ; Start of attributes, top left corner
*25245 LD (HL),A      ; Set to A
 25246 INC HL         ; Next
; This entry point is used by the routine at #R25160.
 25247 DJNZ 25245     ; Back for next byte
 25249 DEC C          ;
; This entry point is used by the routine at #R25160.
 25250 JR NZ,25245    ; Back for next third
; Whole screen attributes have been set, there's a little beep here
 25252 CALL 31987     ; Sound burbler
 25255 DEFB 100,100,0 ; Tiny beep before player ship appears
; Sound burbler return point
 25258 LD BC,256      ; Row 1, col 0, spaceship row
 25261 LD A,(24600)   ; {Spaceship colour (magenta) from here
 25264 LD E,A         ; }
 25265 LD D,32        ; {Set the full row (32 cells) to that colour
 25267 CALL 31290     ; }
 25270 LD BC,5888     ; Row 23, col 0, player row
 25273 LD A,(24599)   ; {Player colour (white) from here
 25276 LD E,A         ; }
 25277 LD D,32        ; {Set the full row (32 cells) to that colour, then
 25279 JP 31290       ; return}

; Data block at 25282
@label=_SPACESHIP_YPOS           ; Maybe, it's unused in the code
b25282 DEFB 0
@label=_SPACESHIP_XPOS
 25283 DEFB 0
 25284 DEFB 8,1,19,1,20,2
 25290 DEFB 3,3,7,3,12,3,17,3
 25298 DEFB 21,3,2,4,7,4,12,4
 25306 DEFB 17,4,22,4,3,5,7,5
 25314 DEFB 12,5,17,5,21,5,20,6
 25322 DEFB 19,7,255,3,1,2,2,1
 25330 DEFB 3,5,3,10,3,15,3,19
 25338 DEFB 3,0,4,5,4,10,4,15
 25346 DEFB 4,20,4,1,5,5,5,10
 25354 DEFB 5,15,5,19,5,2,6,3
 25362 DEFB 7,255,4,1,3,2,2,3
 25370 DEFB 6,3,11,3,16,3,20,3
 25378 DEFB 1,4,6,4,11,4,16,4
 25386 DEFB 21,4,2,5,6,5,11,5
 25394 DEFB 16,5,20,5,3,6,4,7
 25402 DEFB 255,20,1,21,2,4,3,8
 25410 DEFB 3,13,3,18,3,22,3,3
 25418 DEFB 4,8,4,13,4,18,4,23
 25426 DEFB 4,4,5,8,5,13,5,18
 25434 DEFB 5,22,5,21,6,20,7,255

; Routine at 25442
;
; Used by the routine at #R24703.
c25442 LD A,(24653)  ;
 25445 OR A          ;
 25446 JR NZ,25488   ;
 25448 LD A,(32057)  ;
 25451 CP 255        ;
 25453 RET NZ        ;
 25454 LD A,(32058)  ;
 25457 CP 25         ;
 25459 RET NC        ;
 25460 LD A,(32058)  ;
 25463 BIT 0,A       ;
 25465 JR Z,25477    ;
 25467 LD A,1        ;
 25469 LD (24653),A  ;
 25472 XOR A         ;
 25473 LD (25283),A  ;
 25476 RET           ;
*25477 LD A,255      ;
 25479 LD (24653),A  ;
 25482 LD A,233      ;
 25484 LD (25283),A  ;
 25487 RET           ;
*25488 LD A,(25285)  ;
 25491 NEG           ;
 25493 LD (25285),A  ;
 25496 JP P,25628    ;
 25499 LD IX,25283   ;
 25503 LD A,(24653)  ;
 25506 CP 1          ;
 25508 JR Z,25524    ;
 25510 LD HL,25286   ;
 25513 DEC (IX+0)    ;
 25516 XOR A         ;
 25517 CP (IX+0)     ;
 25520 JR NZ,25547   ;
 25522 JR 25537      ;
*25524 LD HL,25364   ;
 25527 INC (IX+0)    ;
 25530 LD A,234      ;
 25532 CP (IX+0)     ;
 25535 JR NZ,25547   ;
; This entry point is used by the routines at #R25592 and #R26225.
@label=clear_spaceship
*25537 XOR A         ;
 25538 LD (24653),A  ;
 25541 LD DE,16416   ; Row 1
 25544 JP 26004      ; Clear row
*25547 LD A,1        ; Mode clear
 25549 CALL 31960    ; Clear sprite
 25552 XOR A         ; Mode set
 25553 CALL 31960    ; Draw sprite
 25556 LD A,(24641)  ; {Return if no bullet in flight
 25559 OR A          ;
 25560 RET Z         ; }
 25561 LD IX,24642   ;
 25565 LD A,(IX+1)   ;
 25568 CP 16         ;
 25570 RET NC        ;
 25571 LD A,(25283)  ;
 25574 CP (IX+0)     ;
 25577 RET NC        ;
 25578 ADD A,23      ;
 25580 CP (IX+0)     ;
 25583 RET C         ;
 25584 CALL 25592    ;
 25587 XOR A         ;
 25588 LD (24653),A  ;
 25591 RET           ;

; Hit spaceship
;
; Award the bonus for hitting the spaceship, then play the
; sound. Game pauses for a moment during sound. Then clear
; the spaceship's row on the screen to remove the bonus value.
;.
; Used by the routine at #R25442.
@label=hit_spaceship
c25592 CALL 25537                      ; Clear spaceship from screen
 25595 CALL 25643                      ; Bump score, display bonus
 25598 CALL 31987                      ; Sound burbler
 25601 DEFB 10,255,10,200,20,150,5,200 ; {Hit spaceship sound
 25609 DEFB 20,150,20,120,20,100,20,80 ;
 25617 DEFB 20,60,20,40,0              ; }
; Sound burbler return point
 25622 LD DE,16416                     ; Row 1
 25625 JP 26004                        ; Clear bonus value from row 1

; Spaceship noise
;
; Used by the routine at #R25442.
@label=spaceship_noise
c25628 CALL 31987            ; Sound burbler
 25631 DEFB 2,25,2,50,2,25,0 ; Spaceship noise
 25638 RET                   ; Sound burbler return point

; Bonus table
;
; 50pts, 50pts, 100pts, 200pts
@label=_BONUS_TABLE
b25639 DEFB 5,5,10,20

; Hit spaceship
;
; Used by the routine at #R25592.
@label=award_spaceship_bonus
c25643 LD A,(32058)  ; {Pick up "just about random value"
 25646 RRA           ;  and make it 0 to 3 inclusive
 25647 AND 3         ; }
 25649 LD HL,25639   ; {Find entry in bonus table.
 25652 CALL 25686    ;  Add offset into it.
 25655 LD A,(HL)     ;  A now contains spaceship bonus}
 25656 LD B,A        ; Stash bonus in B
 25657 LD HL,(24603) ; {Increase score and write
 25660 CALL 25686    ;  back.
 25663 LD (24603),HL ; }
; Now we need to print the bonus where the spaceship is
 25666 LD A,(25283)  ; Pick up xpos in pixels
 25669 SRL A         ; div 2
 25671 SRL A         ; div 4
 25673 SRL A         ; div 8
 25675 LD C,A        ; C=cx
 25676 LD L,B        ; {Retrieve bonus from B and add to HL.
 25677 LD H,0        ; HL is points bonus as 16 bits}
 25679 LD B,1        ; B=cy=1
 25681 LD A,2        ; 2 chars, the print routine adds the extra '0'
 25683 JP 24935      ; Print that number where the ship is

; Add A to HL (1) . There are two copies of this code. . Used by the routine at
; #R25643.
;
; Used by the routine at #R25643.
@label=add_a_to_hl_1
c25686 ADD A,L       ;
 25687 LD L,A        ;
 25688 RET NC        ;
 25689 INC H         ;
 25690 RET           ;

; Data block at 25691
b25691 DEFB 0,0,0,0,0,0,0,1
 25699 DEFB 0,2,0,3,0,4,0,5
 25707 DEFB 255

; Routine at 25708
;
; Used by the routine at #R24703.
c25708 LD A,4        ;
 25710 LD (25694),A  ;
 25713 LD IX,24644   ;
*25717 LD A,(IX+1)   ;
 25720 OR A          ;
 25721 JR Z,25728    ;
 25723 CALL 25853    ;
 25726 JR 25731      ;
*25728 CALL 25749    ;
*25731 CALL 25737    ;
 25734 JR NZ,25717   ;
 25736 RET           ;

; Routine at 25737
;
; Used by the routines at #R25708 and #R25976.
c25737 INC IX        ;
 25739 INC IX        ;
 25741 LD A,(25694)  ;
 25744 DEC A         ;
 25745 LD (25694),A  ;
 25748 RET           ;

; Routine at 25749
;
; Used by the routine at #R25708.
c25749 CALL 32059    ;
 25752 LD A,(32055)  ;
 25755 LD B,A        ;
 25756 LD A,(24612)  ;
 25759 OR A          ;
 25760 RET Z         ;
 25761 CP B          ;
 25762 RET C         ;
 25763 LD A,(24634)  ;
 25766 LD (25691),A  ;
 25769 LD A,(24638)  ; Player ship pos, X
 25772 ADD A,7       ;
 25774 LD B,A        ;
 25775 LD A,(32057)  ;
 25778 AND 15        ;
 25780 ADD A,B       ;
 25781 LD (25692),A  ;
 25784 LD A,(32056)  ;
 25787 CP 127        ;
 25789 JR NC,25797   ;
 25791 LD A,(32057)  ;
 25794 LD (25692),A  ;
*25797 LD A,(25691)  ;
 25800 PUSH IX       ;
 25802 CALL 27097    ; IX = 27327 + ( 'A' * 706 )
 25805 LD A,(IX+1)   ;
 25808 LD (25693),A  ;
 25811 LD A,(25692)  ;
 25814 CALL 26154    ;
 25817 POP IX        ;
 25819 JR NZ,25832   ;
 25821 LD A,(25691)  ;
 25824 DEC A         ;
 25825 LD (25691),A  ;
 25828 JP P,25797    ;
 25831 RET           ;
*25832 LD A,(25693)  ;
 25835 INC A         ;
 25836 INC A         ;
 25837 SLA A         ;
 25839 SLA A         ;
 25841 SLA A         ;
 25843 LD (IX+1),A   ;
 25846 LD A,(25692)  ;
 25849 LD (IX+0),A   ;
 25852 RET           ;

; Routine at 25853
;
; Used by the routine at #R25708.
c25853 LD HL,25695                  ;
 25856 LD A,1                       ; Mode clear
 25858 CALL 31960                   ; Clear sprite
 25861 LD A,(IX+1)                  ;
 25864 INC A                        ;
 25865 CP 185                       ;
 25867 JP NC,26033                  ;
 25870 CP 177                       ;
 25872 JP NC,25901                  ;
; This entry point is used by the routine at #R25994.
*25875 LD (IX+1),A                  ;
 25878 ADD A,5                      ;
 25880 LD B,A                       ;
 25881 LD C,(IX+0)                  ;
 25884 PUSH IX                      ;
 25886 CALL 31527                   ;
 25889 POP IX                       ;
 25891 JP NZ,26033                  ;
 25894 LD HL,25695                  ;
 25897 XOR A                        ; Mode set
 25898 JP 31960                     ; Draw sprite
*25901 LD A,(IX+0)                  ;
 25904 LD B,A                       ;
 25905 LD A,(24638)                 ; Player ship pos, X
 25908 CP B                         ;
 25909 JR NC,25994                  ;
 25911 ADD A,19                     ;
 25913 CP B                         ;
 25914 JR C,25994                   ;
 25916 XOR A                        ;
 25917 LD (24638),A                 ; Player ship pos, X
 25920 LD B,8                       ;
*25922 LD A,(23624)                 ; Pick up port 254 shadow
 25925 ADD A,8                      ; ???
 25927 AND 56                       ; Mask out bottom 3 bits, border black
 25929 LD (23624),A                 ; Put it back
 25932 CALL 31987                   ; Sound burbler
 25935 DEFB 40,10,40,20,40,40,40,80 ; {Player hit noise
 25943 DEFB 0                       ; }
; Sound burbler return point
 25944 DJNZ 25922                   ; Repeat player hit *8
 25946 CALL 26001                   ; Clear bottom row
 25949 CALL 31987                   ; Sound burbler
 25952 DEFB 50,255,255,50,50,255,0  ; Game over sound No, can't be, the check
                                    ; is below
; Sound burbler return point
 25959 LD A,(24611)                 ; {Lives remaining Lost life?
 25962 DEC A                        ;
 25963 LD (24611),A                 ; }
 25966 CALL NZ,26965                ;
 25969 CALL 25976                   ;
 25972 OR 1                         ;
 25974 POP HL                       ;
 25975 RET                          ;

; Routine at 25976
;
; Used by the routines at #R25853 and #R26225.
c25976 LD A,4        ;
 25978 LD (25694),A  ;
; This entry point is used by the routine at #R25853.
 25981 LD IX,24644   ;
*25985 CALL 26020    ;
 25988 CALL 25737    ;
 25991 JR NZ,25985   ;
 25993 RET           ;

; Routine at 25994
;
; Used by the routine at #R25853.
c25994 LD A,(IX+1)   ;
 25997 INC A         ;
 25998 JP 25875      ;

; Clear bottom character row
;
; Used by the routines at #R25853 and #R26225.
@label=clear_bottom_char_row
c26001 LD DE,20704   ; Top scan of bottom row of the screen, where the ship is

; Clear one character row
;
; Takes the address of the top scan byte of the leftmost char in a row of 32
; chars and sets them to zero. So it clears 32 chars, 8 scans high, starting at
; DE.
;.
; Used by the routines at #R25034, #R25442, #R25592, #R30995 and #R31327.
;
; I:DE Top scan of screen char to start clearing at
@label=clear_char_row
c26004 LD C,8        ; We're going to clear 8 scans at screen address in DE
 26006 XOR A         ;
*26007 LD B,32       ; {Screen width is 32 bytes, write zero into each byte
 26009 PUSH DE       ;
*26010 LD (DE),A     ;
 26011 INC DE        ;
 26012 DJNZ 26010    ;
 26014 POP DE        ; }
 26015 INC D         ; Down one scan (this won't work across boundaries)
 26016 DEC C         ; Back for next scan
 26017 JR NZ,26007   ;
 26019 RET           ;

; Routine at 26020
;
; Used by the routines at #R25976 and #R26490.
c26020 LD A,(IX+1)   ;
; This entry point is used by the routine at #R25853.
 26023 OR A          ;
 26024 RET Z         ;
 26025 LD HL,25695   ;
 26028 LD A,1        ; Mode clear
 26030 CALL 31960    ; Clear sprite
; This entry point is used by the routine at #R25853.
*26033 LD (IX+1),0   ;
 26037 RET           ;

; Alien hit?
;
; Check if there's a bullet in flight. If not return immediately. If there is,
; call the collision detection routine.
;
; Used by the routine at #R24703.
@label=is_alien_hit
c26038 LD A,(24641)  ; {Return if no bullet in flight
 26041 OR A          ;
 26042 RET Z         ; }
 26043 CALL 26049    ;
 26046 JP 26490      ;

; Bullet and alien collision check, Y axis
;
; Check whether the bullet's Y axis position matches an alien's location. If
; not, there's no collision. If so, go and check the bullet's X axis.
; .
; Used by the routine at #R26038.
@label=bullet_alien_coll_yaxis
c26049 LD A,(24643)  ; Pick up bullet Y pos
 26052 SRL A         ; {Divide by 8 to convert bullet pixel ypos to cpos
 26054 SRL A         ;
 26056 SRL A         ;
 26058 INC A         ; }
 26059 LD (26101),A  ; Stash A
 26062 LD A,(24634)  ;
*26065 LD (26099),A  ;
 26068 CALL 27097    ; IX = 27327 + ( 'A' * 706 )
 26071 LD A,(26101)  ; Retrieve A
 26074 CP (IX+1)     ; IX+1 must be alien cypos
 26077 JR Z,26087    ;
 26079 LD A,(26099)  ;
 26082 DEC A         ;
 26083 JP P,26065    ;
 26086 RET           ; No collision on the Y axis
; Jump here if there's a collision on the Y axis
*26087 LD A,(24642)  ; Pick up bullet X pos
 26090 CALL 26154    ; Do X axis collision check
 26093 RET Z         ; Return if no collision
 26094 JP 26225      ; Collision detected, kill the alien

; Data block at 26097
b26097 DEFB 0,0
; This holds the score value of a hit alien divided by 10.
; So a green alien, worth 20, would put 2 in here.
@label=_HIT_ALIEN_ROW
 26099 DEFB 0
 26100 DEFB 0
; Y axis collision code stores A register here
@label=_COLL_YAXIS_TEMP_STORE
 26101 DEFB 0
; Address of top row of explosion graphic to be drawn is placed here.
; It'll be the UDG_TOP to draw it and UDG_CLEAR to clear it
@label=_EXPLOSION_GFX_TOP
 26102 DEFB 0,0
; Address of bottom row of explosion graphic to be drawn is placed here
; It'll be the UDG_TOP to draw it and UDG_CLEAR to clear it
@label=_EXPLOSION_GFX_BOTTOM
 26104 DEFB 0,0
; UDGs, interleaved. It's a 16x11 image, so 0th row bytes 0 and 1, then 1st row
; bytes 0 and 1, etc. The bottom 5 scans are empty. I gave up trying to get
; SkoolKit to render it.
@label=_EXPLOSION_UDG_TOP
 26106 DEFB 16,128
 26108 DEFB 9,16
 26110 DEFB 73,32
 26112 DEFB 38,64
 26114 DEFB 16,128
 26116 DEFB 0,0
 26118 DEFB 16,128
 26120 DEFB 102,96
@label=_EXPLOSION_UDG_BOTTOM
 26122 DEFB 137,48
 26124 DEFB 9,128
 26126 DEFB 16,128
 26128 DEFB 0,0
 26130 DEFB 0,0
 26132 DEFB 0,0
 26134 DEFB 0,0
 26136 DEFB 0,0
@label=_EXPLOSION_UDG_CLEAR
 26138 DEFB 0,0
 26140 DEFB 0,0
 26142 DEFB 0,0
 26144 DEFB 0,0
 26146 DEFB 0,0
 26148 DEFB 0,0
 26150 DEFB 0,0
 26152 DEFB 0,0

; Bullet and alien collision check, X axis
;
; Check whether the bullet's X axis position matches an alien's location. We
; already know that the Y axis matches one, so if this does too we have a hit.
; .
; Used by the routines at #R25749 and #R26049.
;
; I:IX Pointer to alien structure which has y-axis collision
; O:A 0 for no collision, 1 for collision
@label=bullet_alien_coll_xaxis
c26154 LD (26097),A  ;
 26157 CALL 31119    ;
 26160 LD IX,31107   ;
 26164 LD A,(26097)  ;
 26167 LD B,A        ;
 26168 SRL A         ;
 26170 SRL A         ;
 26172 SRL A         ;
 26174 LD (26100),A  ;
 26177 SUB (IX+4)    ;
 26180 JR C,26223    ;
 26182 BIT 0,A       ;
 26184 JR Z,26190    ;
 26186 BIT 2,B       ;
 26188 JR NZ,26223   ;
*26190 CP (IX+5)     ;
 26193 JR NC,26223   ;
 26195 AND 254       ;
 26197 ADD A,(IX+4)  ;
 26200 LD (26100),A  ;
 26203 SUB (IX+2)    ;
 26206 LD (26098),A  ;
 26209 LD C,A        ;
 26210 LD B,0        ;
 26212 LD IX,(31107) ;
 26216 ADD IX,BC     ;
 26218 LD A,(IX+2)   ;
 26221 OR A          ;
 26222 RET           ;
*26223 XOR A         ;
 26224 RET           ;

; Alien hit
;
; Call when the player bullet hits an alien. The alien explosion is drawn
; where the alien is, the blurbler is called, then the explosion is cleared.
; The game freezes while the explosion is on screen and the sound is playing,
; but you don't notice it.
;.
; Used by the routine at #R26049.
;
; I:IX Alien structure, I think
@label=alien_hit
c26225 CALL 26320                    ;
 26228 LD HL,26106                   ; {Top char row of explosion graphic
 26231 LD (26102),HL                 ; }
 26234 LD HL,26122                   ; {Bottom char row of explsion graphic
 26237 LD (26104),HL                 ; }
 26240 CALL 26337                    ;
 26243 CALL 26947                    ;
 26246 CALL 31987                    ; Sound burbler
 26249 DEFB 16,80,32,40,64,20,128,10 ; {Alien hit sound
 26257 DEFB 0                        ; }
; Sound burbler return point
 26258 CALL 26464                    ;
 26261 LD HL,26138                   ;
 26264 LD (26102),HL                 ;
 26267 LD (26104),HL                 ;
 26270 CALL 26337                    ;
 26273 LD A,(24615)                  ;
 26276 DEC A                         ;
 26277 LD (24615),A                  ;
 26280 JP NZ,26375                   ;
 26283 CALL 25976                    ;
 26286 LD B,40                       ;
*26288 LD A,(23624)                  ; Pick up port 254 shadow
 26291 ADD A,8                       ; ???
 26293 AND 56                        ; Mask out bottom 3 bits, border black
 26295 LD (23624),A                  ; Put it back
 26298 CALL 31987                    ; Sound burbler
 26301 DEFB 16,100,32,50,64,25,32,50 ; {Last alien hit sound
 26309 DEFB 0                        ; }
; Sound burbler return point
 26310 DJNZ 26288                    ;
 26312 CALL 25537                    ;
 26315 CALL 26001                    ; Clear bottom row
 26318 POP HL                        ;
 26319 RET                           ;

; Alien hit, zero something
;
; Starting with the alien structure for the alien which has been hit, zero
; bytes 2 and 3, then move on 22 bytes and repeat 32 times.
; .
; I've no idea why as yet
; .
; Used by the routine at #R26225.
;
; I:IX Hit alien structure
@label=alien_hit_zero_some_bytes
c26320 LD B,32       ;
 26322 LD DE,22      ;
 26325 XOR A         ;
*26326 LD (IX+2),A   ;
 26329 LD (IX+3),A   ;
 26332 ADD IX,DE     ;
 26334 DJNZ 26326    ;
 26336 RET           ;

; Draw alien explosion
;
; An alien has been hit. Replace its graphic with the explosion graphic.
; .
; Used by the routine at #R26225.
@label=draw_alien_explosion
c26337 LD BC,(26100) ; Bullet cy,cx, that's the explosion place
 26341 CALL 32254    ; cxy2saddr: DE = screen address of char C,B
 26344 LD HL,(26102) ; Pick up top row of graphic to draw
 26347 CALL 26361    ; Call down to draw the top 2 chars of explosion
 26350 LD BC,(26100) ; Bullet cy,cx, that's the explosion place
 26354 INC B         ; inc cy, ready for bottom 2 chars of explosion
; Bit of an odd way of moving the graphics bytes into the screen. It uses LDI
; to do 2 bytes, then restores the registers to put back half of the effects of
; that instruction.
; .
; This entry point is used by the routine at #R26225.
 26355 CALL 32254    ; cxy2saddr: DE = screen address of char C,B
 26358 LD HL,(26104) ; Pick up bottom row of graphic to draw
*26361 LD B,8        ; 8 scans
*26363 LDI           ; Graphic to screen, left side
 26365 LDI           ; Graphic to screen, right side
 26367 DEC DE        ; {Back up 2 screen bytes
 26368 DEC DE        ; }
 26369 INC BC        ; {Restore BC
 26370 INC BC        ; }
 26371 INC D         ; Go down one screen row
 26372 DJNZ 26363    ;
 26374 RET           ;

; Routine at 26375
;
; Used by the routine at #R26225.
c26375 LD HL,24616   ;
 26378 LD A,(26099)  ;
 26381 CALL 26484    ;
 26384 DEC (HL)      ;
 26385 LD HL,24621   ;
 26388 LD IX,31107   ;
 26392 LD A,(26098)  ;
 26395 SRL A         ;
 26397 CALL 26484    ;
 26400 DEC (HL)      ;
 26401 LD HL,24616   ;
 26404 LD A,(24634)  ;
 26407 INC A         ;
 26408 LD B,A        ;
 26409 CALL 26484    ;
 26412 XOR A         ;
*26413 DEC HL        ;
 26414 DEC B         ;
 26415 OR (HL)       ;
 26416 JR Z,26413    ;
 26418 LD A,B        ;
 26419 LD (24634),A  ; This is used by bullet collision
 26422 LD B,255      ;
 26424 LD HL,24621   ;
 26427 XOR A         ;
 26428 DEC HL        ;
*26429 INC HL        ;
 26430 INC B         ;
 26431 OR (HL)       ;
 26432 JR Z,26429    ;
 26434 LD A,B        ;
 26435 LD (24636),A  ;
 26438 LD HL,24621   ;
 26441 LD A,11       ;
 26443 LD B,A        ;
 26444 INC B         ;
 26445 CALL 26484    ;
 26448 XOR A         ;
*26449 DEC HL        ;
 26450 DEC B         ;
 26451 OR (HL)       ;
 26452 JR Z,26449    ;
 26454 LD A,B        ;
 26455 LD (24637),A  ;
 26458 RET           ;

; Scores table based on alien rows.
;
; Row 0 is the top row,
; aliens are worth 3*10 there. Rows 1 and 2 have aliens
; worth 2*10, and rows 3 and 4 have aliens worth 1*10.
@label=_ROW_SCORES_TABLE
b26459 DEFB 3,2,2,1,1

; Increase score when alien hit
;
; Bump the player's score when an alien is hit.
; Red are worth 10, green are worth 20, yellow are worth 30
;.
; Used by the routine at #R26225.
@label=increase_score
c26464 LD A,(26099)  ; Pick up row of hit alien
 26467 LD HL,26459   ; {Calculate offset into this table
 26470 CALL 26484    ; }
 26473 LD A,(HL)     ; That's the value to add to score
 26474 LD HL,(24603) ; {Increment score
 26477 CALL 26484    ;
 26480 LD (24603),HL ; }
 26483 RET           ;

; Add A to HL (2)
;
; There are two copies of this code.
; .
; Used by the routines at #R26375 and #R26464.
@label=add_a_to_hl_2
c26484 ADD A,L       ;
 26485 LD L,A        ;
 26486 RET NC        ;
 26487 INC H         ;
 26488 RET           ;

; Unused
s26489 DEFS 1

; Routine at 26490
;
; Used by the routine at #R26038.
c26490 LD IX,24644           ;
 26494 LD A,4                ;
 26496 LD (26489),A          ;
 26499 LD BC,(24642)         ;
; This entry point is used by the routine at #R26541.
*26503 LD A,(IX+1)           ;
 26506 OR A                  ;
 26507 JR Z,26541            ;
 26509 LD A,(IX+0)           ;
 26512 CP C                  ;
 26513 JR NZ,26541           ;
 26515 LD A,(IX+1)           ;
 26518 SUB B                 ;
 26519 NEG                   ;
 26521 CP 6                  ;
 26523 JR NC,26541           ;
 26525 CALL 26020            ;
 26528 CALL 31987            ; Sound burbler
 26531 DEFB 4,24,8,12,16,6,0 ; Hit alien bullet sound
 26538 JP 26947              ; Sound burbler return point

; Routine at 26541
;
; Used by the routine at #R26490.
c26541 INC IX        ;
 26543 INC IX        ;
 26545 LD A,(26489)  ;
 26548 DEC A         ;
 26549 LD (26489),A  ;
 26552 JR NZ,26503   ;
 26554 LD BC,(24642) ;
 26558 DEC B         ;
 26559 CALL 31527    ;
 26562 RET Z         ;
 26563 JP 26947      ;

; Handle player inputs.
;
; Call the read the keyboard routine, which updates the player's ship's
; direction, and whether they've hit fire. Move the player's ship based on
; input. If there's a bullet in flight reposition and redraw it. That ends the
; routine because there's only one bullet allowed. If no bullet is in flight
; check to see if fire was pressed. If so, start a new bullet on its way.
; .
; Used by the routine at #R24703.
@label=handle_inputs
c26566 CALL 26587    ; Read keyboard
 26569 CALL 26675    ; Move and redraw player
 26572 LD A,(24641)  ; {If bullet is in flight jump off to reposition and
 26575 OR A          ; redraw it.
 26576 JP NZ,26916   ; }
 26579 LD A,(24652)  ; {Has fire been pressed? Return if not
 26582 OR A          ;
 26583 RET Z         ; }
 26584 JP 26883      ; Handle firing of bullet

; Keypress detection
;
; Used by the routines at #R25160 and #R26566
; .
; Updates values at #R24640, #R24652 and #R26721
@label=read_keyboard
c26587 LD BC,65278   ; 0xFEFE - matrix SHIFT, Z, X, C, V
 26590 IN E,(C)      ; Read port into E
 26592 LD BC,63486   ; 0xF7FE - matrix 1, 2, 3, 4, 5
 26595 IN D,(C)      ; Read port into D
 26597 LD A,(24638)  ; A holds player ship X-pos
 26600 LD C,0        ; C will be the pixels to move
; Left pressed check - look for Z or 1 being down
 26602 BIT 1,E       ; Z (left) pressed?
 26604 JR Z,26610    ; Skip looking for other key (1) if yes
 26606 BIT 0,D       ; 1 (left) pressed?
 26608 JR NZ,26614   ; Neither left key is pressed so skip to look for right
                     ; pressed
; Move left is pressed
*26610 OR A          ; Is player already at leftmost position?
 26611 JR Z,26614    ; Yes, can't move left then
 26613 DEC C         ; Move one pixel left
; Right pressed check - look for X or 2 being down
*26614 BIT 2,E       ; X (right) pressed?
 26616 JR Z,26622    ; Skip looking for other key (2) if yes
 26618 BIT 1,D       ; 2 (left) pressed?
 26620 JR NZ,26627   ; Neither right key is pressed so skip to look for fire
                     ; pressed
; Move right is pressed
*26622 CP 235        ; Is player already at rightmost position?
 26624 JR Z,26627    ; Yes, can't move right then
 26626 INC C         ; Move one pixel right
; C contains position adjustment, -1 or +1
*26627 LD A,C        ; {Load player ship position adjustment, -1, 0 or 1
 26628 LD (24640),A  ; }
; Now check for fire being pressed
 26631 LD BC,32766   ; 0x7FFE - matrix SPACE, SYM SHFT, M, N, B
 26634 IN E,(C)      ; Read port into E
 26636 BIT 0,E       ; Space pressed?
 26638 JR Z,26654    ; Jump to fire-pressed routine if yes
 26640 BIT 4,D       ; D still holds number keys state, 5 pressed?
 26642 JR Z,26654    ; Jump to fire-pressed routine if yes
; If we drop to here fire is not pressed, B isn't pressed, so we set flags and
; return
 26644 LD A,1        ; {Set fire released flag to 1
 26646 LD (26721),A  ; }
*26649 XOR A         ; {Set fire pressed flag to 0
 26650 LD (24652),A  ; }
 26653 RET           ;
; Fire is pressed, check B which is a secret button to freeze your bullet
*26654 BIT 4,E       ; E still contains Z-B keys state, B pressed?
 26656 JR NZ,26660   ; Jump if B is not pressed
; Exit, B is pressed
 26658 POP BC        ; {Restore and return
 26659 RET           ; }
; Fire is pressed, B is not pressed
*26660 LD A,(26721)  ; {Is fire released flag set to 0? Jump back and clear
 26663 OR A          ; fire pressed flag if so
 26664 JP Z,26649    ; }
 26667 LD (24652),A  ; Set fire pressed flag to 1
 26670 XOR A         ; {Set released flag to 0
 26671 LD (26721),A  ; }
 26674 RET           ;

; Redraw player ship
;
; If the player's ship needs to move, erase and redraw it. The ypos adjustment
; typically comes from the keypress routine, and will be -1 to move a pixel
; left, or 1 to move a pixel right. This code is used in a more contrived
; manner to animate a new ship when an extra life is awarded.
; .
; Used by the routines at #R26566 and #R26965.
;
; O:IX #R24638
@label=redraw_player_ship
c26675 LD A,(24640)  ; Player ship position adjustment, -1, 0 or 1
 26678 OR A          ; {Ship doesn't need to move, just return
 26679 RET Z         ; }
 26680 JP P,26684    ; {1 has an odd number of bits. -1, even. A=0 if moving
 26683 XOR A         ; right, A=1 if moving left.}
*26684 LD IX,24638   ; IX points to player ship pos, X
 26688 CALL 26712    ; Select sprite data based on A
 26691 LD A,1        ; Mode clear
 26693 CALL 31960    ; Clear sprite side pixels
 26696 XOR A         ; Mode set
 26697 CALL 31960    ; Draw sprite side pixels
 26700 LD A,(24640)  ; {Pick up adjustment again and add it to the current xpos
 26703 LD B,A        ; value. Adding -1 or 1 makes it the correct position
 26704 LD A,(24638)  ; value. Then write it back out.
 26707 ADD A,B       ;
 26708 LD (24638),A  ; }
 26711 RET           ;

; Select player ship sprite data
;
; Set HL to #R26722 if A is 1, or #R26796 is A is 0.
; .
; A is used to indicate whether the ship needs to move left or right. Choose
; the correct sprite data ready for the redraw.
;
; I:A 0 if player moving right, 1 if player moving left
; O:HL Sprite data address
@label=select_player_ship_sprite
c26712 LD HL,26722   ;
 26715 OR A          ;
 26716 RET NZ        ; Return if A=1, hence left move
 26717 LD HL,26796   ;
 26720 RET           ; Return if A=0, hence right move

; Keypress routine's fire-released flag
;
; This is set 1 when the fire key is released. It's set 0 when the fire key is
; pressed. If it's found to be 0 when the fire key is read as pressed the
; fire-pressed flag is held at 0. In order words the fire-pressed flag will
; only go true when this is 1, and it's only set 1 when the fire key is found
; to be released
@label=_FIRE_RELEASED
b26721 DEFB 0        ; Fire released flag, local to keypress routine

; Player ship sprite data
;
; Player ship sprite data. x,y pairs, each giving a single pixel Pixels to
; clear as sprite moves left or right. These define an edge of the sprite
; rather than the whole sprite itself. The edge is removed by one set of data
; and drawn in by the other set.
@label=_GFX_PLAYER_SHIP_LEFT_CLEAR
b26722 DEFB 10,0,9,1,1,2,9
 26729 DEFB 2,19,2,1,3,9,3,19
 26737 DEFB 3,1,4,6,4,18,4,1
 26745 DEFB 5,1,6,6,6,18,6,1
 26753 DEFB 7,7,7,19,7,255
@label=_GFX_PLAYER_SHIP_LEFT_DRAW
 26759 DEFB 11,0
 26761 DEFB 12,1,2,2,12,2,20,2
 26769 DEFB 2,3,12,3,20,3,3,4
 26777 DEFB 15,4,20,4,20,5,3,6
 26785 DEFB 15,6,20,6,2,7,14,7
 26793 DEFB 20,7,255
@label=_GFX_PLAYER_SHIP_RIGHT_CLEAR
 26796 DEFB 10,0,11,1,1
 26801 DEFB 2,11,2,19,2,1,3,11
 26809 DEFB 3,19,3,2,4,14,4,19
 26817 DEFB 4,19,5,2,6,14,6,19
 26825 DEFB 6,1,7,13,7,19,7,255
@label=_GFX_PLAYER_SHIP_RIGHT_DRAW
 26833 DEFB 9,0,8,1,0,2,8,2
 26841 DEFB 18,2,0,3,8,3,18,3
 26849 DEFB 0,4,5,4,17,4,0,5
 26857 DEFB 0,6,5,6,17,6,0,7
 26865 DEFB 6,7,18,7,255
; This looks like a vertical line, might be a bullet?
@label=_GFX_BULLET
 26870 DEFB 0
 26871 DEFB 0,0,1
 26874 DEFB 0,2,0,3,0,4,0,5
 26882 DEFB 255

; Fire pressed
;
; Used by the routine at #R26566.
@label=fire_pressed
c26883 CALL 31987                ; Sound burbler
 26886 DEFB 20,50,10,100,5,200,0 ; Player fire sound
; Sound burbler return point
 26893 LD A,1                    ; {Mark bullet in flight
 26895 LD (24641),A              ; }
 26898 LD A,(24638)              ; {Player xpos plus half the width of the
 26901 LD IX,24642               ; player ship is the bullet's xpos
 26905 ADD A,10                  ;
 26907 LD (IX+0),A               ; }
 26910 LD (IX+1),176             ; Bullet ypos starts down here
 26914 JR 26940                  ; Jump to draw bullet

; Draw the player bullet.
;
; The bullet graphic is cleared from the screen and drawn back in again. ???
; Still not sure what the sub4 thing is.
;
; Used by the routine at #R26566.
@label=draw_player_bullet
c26916 LD IX,24642   ;
 26920 LD HL,26870   ;
 26923 LD A,1        ; Mode clear
 26925 CALL 31960    ; Clear sprite
 26928 LD A,(IX+1)   ; Fetch player bullet xpos
 26931 SUB 4         ; {???
 26933 CP 4          ;
 26935 JR Z,26959    ; }
 26937 LD (IX+1),A   ; Set player bullet xpos
; This entry point is used by the routine at #R26883.
*26940 LD HL,26870   ;
 26943 XOR A         ; Mode set
 26944 JP 31960      ; Draw sprite

; Stop player bullet
;
; Player bullet is cleared from screen and the flag indicating there's a bullet
; in flight is cleared.
; .
; Used by the routines at #R26225, #R26538 and #R26541.
@label=clear_player_bullet
c26947 LD IX,24642   ;
 26951 LD HL,26870   ;
 26954 LD A,1        ; Mode clear
 26956 CALL 31960    ; Clear sprite
; This entry point is used by the routine at #R26916.
*26959 XOR A         ; {Bullet no longer in flight
 26960 LD (24641),A  ; }
 26963 RET           ;

; Temporary store for where the new ship should end up at the end of the scroll
; animation.
@label=_NEW_SHIP_TARGET_XPOS
s26964 DEFS 1

; New player ship
;
; Draw player ship and scroll it into position. Called with #R24638 and #R24639
; holding screen location of new ship.
; .
; Used by the routine which draws lives remaining at the top, and when the a
; new life appears at the bottom after dying
@label=new_player_ship
c26965 PUSH IX       ;
 26967 PUSH HL       ;
 26968 LD A,255      ; {Set up adjustment of -1, which means 1 pixel left
 26970 LD (24640),A  ; }
 26973 LD A,(24638)  ; Player ship pos, X
 26976 LD (26964),A  ; Store the final xpos (where the scroll finishes)
 26979 ADD A,40      ; Start 40 pixels right of final position
 26981 LD (24638),A  ; {Set player ship xpos and draw the ship there. Returns
*26984 CALL 26675    ; with xpos pointed to by IX.}
 26987 CALL 31987    ; {Sound burbler with move player ship sound
 26990 DEFB 1,15,0   ; }
; Sound burbler return point
 26993 LD A,(26964)  ; Pick up xpos where we're moving the ship to
 26996 CP (IX+0)     ; {Are we there? Adjustment is still -1 so we keep going
 26999 JR NZ,26984   ; round until the ship is in place}
 27001 POP HL        ;
 27002 POP IX        ;
 27004 RET           ;

; Copy alien UDG data to a screen row
;
; Each row of aliens has 11 of them. This populates the graphics
; used to render a row.
;.
; Copy 32 bytes of alien UDG data (that's one sprite) from the location
; at HL to the location at IX, 11 times over.
;.
; Used by the routine at #R27030.
;
; I:HL Alien data
; I:IX Alien row data
@label=populate_alien_row_udgs
c27005 LD C,32       ;
*27007 LD E,(HL)     ; {Load DE from 2 byte alien scan
 27008 INC HL        ;
 27009 LD D,(HL)     ;
 27010 INC HL        ; }
 27011 LD B,11       ; {Copy that pair of bytes
*27013 LD (IX+0),E   ; repeatedly, 11 times, into
 27016 INC IX        ; the location pointed to by IX.
 27018 LD (IX+0),D   ;
 27021 INC IX        ;
 27023 DJNZ 27013    ; }
 27025 DEC C         ; {Repeat 32 times }
 27026 JR NZ,27007   ;
 27028 RET           ;

@label=_ALIEN_INIT_COUNTER
s27029 DEFS 1

; Initialise alien data
;
; Not much clue what this is doing
;
; Used by the routine at #R24703.
@label=init_aliens
c27030 LD A,(24614)  ;
 27033 ADD A,3       ;
 27035 LD (27326),A  ;
 27038 LD HL,27321   ;
 27041 LD (27319),HL ;
 27044 LD A,4        ;
 27046 LD (27029),A  ;
 27049 LD IX,27327   ;
*27053 LD (IX+0),5   ;
 27057 INC IX        ;
 27059 LD A,(27326)  ;
 27062 LD (IX+0),A   ;
 27065 INC IX        ;
 27067 INC A         ;
 27068 INC A         ;
 27069 LD (27326),A  ;
 27072 LD HL,(27319) ;
 27075 LD A,(HL)     ;
 27076 INC HL        ;
 27077 LD (27319),HL ;
 27080 CALL 27114    ;
 27083 CALL 27005    ;
 27086 LD A,(27029)  ;
 27089 DEC A         ;
 27090 LD (27029),A  ;
 27093 JP P,27053    ;
 27096 RET           ;

; IX = 27327 + ( 'A' * 706 )
;
; Guessing this is finding an entry in an array of data structures which are
; 706 bytes? That would be too big for the aliens?
; .
; 27327 starts a large data block which starts off with the assembler strings
; and stuff, so it's being populated with some large amount of data.
; .
; For values of A 0 to 4 this seems to yield a pointer into data. 5 or over
; yields a pointer to code. So it might be alien rows?
.
; Used by the routines at #R25749, #R26049, #R30857 and #R31075.
;
; I:A Multiplier
; O:IX 27327 + A*706
@label=multi_a_by_706_add_27327
c27097 LD IX,27327   ;
 27101 OR A          ; {If A is zero no multiplication is necessary
 27102 RET Z         ; }
 27103 PUSH BC       ;
 27104 LD BC,706     ;
*27107 ADD IX,BC     ;
 27109 DEC A         ;
 27110 JR NZ,27107   ;
 27112 POP BC        ;
 27113 RET           ;

; Find alien UDG data
;
; Returns the location of the UDG data for the alien graphics.
; A register provides the alien type to find.
;.
; Used by the routine at #R27030.
;
; I:A Alien type: 0 for red alien, 1 for green alien, 2 for yellow alien
; O:HL UDG address starting at #R27127
@label=find_alien_udg
c27114 LD HL,27127   ; Start with first alien UDG
 27117 OR A          ; {A=0 means we've already got what we want.
 27118 RET Z         ; }
 27119 LD BC,64      ; {Each alien set is 64 bytes long
*27122 ADD HL,BC     ;  so add that offset for each type
 27123 DEC A         ;  of alien
 27124 JR NZ,27122   ;}
 27126 RET           ;

; Aliens data
;
; Aliens are UDGs, 2 bytes per scan. They're 12 bits wide with a 4 bit
; gap on the right side, and 12 bits tall with a 4 bit gap at the bottom.
; Each graphic is 16x16 pixels, so 32 bytes per alien.
@label=_RED_ALIEN_LOOK_LEFT
b27127 DEFB 31,128,63,192,127,224,255,240,222,240,222,240,222,240,255,240
 27143 DEFB 63,128,48,192,96,96,192,48,0,0,0,0,0,0,0,0
@label=_RED_ALIEN_LOOK_RIGHT
 27159 DEFB 31,128,63,192,127,224,255,240,247,176,247,176,247,176,255,240
 27175 DEFB 31,128,25,128,25,128,25,128,0,0,0,0,0,0,0,0
@label=_GREEN_ALIEN_LOOK_LEFT
 27191 DEFB 192,48,192,48,255,240,134,16,231,144,134,16,255,240,47,64
 27207 DEFB 79,32,134,16,64,32,32,64,0,0,0,0,0,0,0,0
@label=_GREEN_ALIEN_LOOK_RIGHT
 27223 DEFB 192,48,192,48,255,240,134,16,158,112,134,16,255,240,47,64
 27239 DEFB 47,64,38,64,32,64,32,64,0,0,0,0,0,0,0,0
@label=_YELLOW_ALIEN_LOOK_LEFT
 27255 DEFB 48,192,48,192,9,0,15,0,31,128,63,192,127,224,176,208
 27271 DEFB 159,144,9,0,16,128,9,0,0,0,0,0,0,0,0,0
@label=_YELLOW_ALIEN_LOOK_RIGHT
 27287 DEFB 192,48,192,48,32,64,22,128,31,128,63,192,255,240,48,192
 27303 DEFB 31,128,9,0,16,128,32,64,0,0,0,0,0,0,0,0
; Alien handling data?
 27319 DEFB 0,0
 27321 DEFB 2,1,1,0,0
@label=_ALIEN_SOMETHING3
 27326 DEFB 0
@label=_ALIEN_SOMETHING2
 27327 DEFB 195,19

; Message at 27329
t27329 DEFM "RNo "

; Unused
s27333 DEFS 1

; Message at 27334
t27334 DEFM " Fatal error(s)"

; Unused
s27349 DEFS 1

; Message at 27350
t27350 DEFM " Warning(s)"

; Data block at 27361
b27361 DEFB 0,14,0,58,19,140,71,205
 27369 DEFB 92,107,195,126,124,205,41,126
 27377 DEFB 33,226,125,205,44,126,205,222
 27385 DEFB 106,195,16,126

; Message at 27389
t27389 DEFM "REPT/IRP/IRPC/MACRO"

; Unused
s27408 DEFS 1

; Message at 27409
t27409 DEFM "Unterminated "

; Data block at 27422
b27422 DEFB 0,205,41,126,33,57,126,205
 27430 DEFB 44,126,205,222,106,62,13,205
 27438 DEFB 16,106,62,10,205,16

; Message at 27444
t27444 DEFM "j:$"

; Data block at 27447
b27447 DEFB 142,60,200,62,13,205,218,147
 27455 DEFB 62,10,195,218,147,33,246,125
 27463 DEFB 229,205,139,106,225,58,36,142
 27471 DEFB 60,200,195,9,146

; Message at 27476
t27476 DEFM "Conditional"

; Unused
s27487 DEFS 1

; Message at 27488
t27488 DEFM "Symbols:"

; Data block at 27496
b27496 DEFB 13,10,0

; Message at 27499
t27499 DEFM "Macros:"

; Data block at 27506
b27506 DEFB 13,10,0,33,226,255,57,235
 27514 DEFB 42,191,141,205,150,94,210,112
 27522 DEFB 130,58,144,141,183,33,0,0
 27530 DEFB 34,185,141,34,187,141,42,142
 27538 DEFB 141,194,127,126,42,191,141

; Message at 27545
t27545 DEFM "+<2"

; Data block at 27548
b27548 DEFB 144,141,175,50,145,141,50,155
 27556 DEFB 141,235,42,181,141,36,205,150
 27564 DEFB 94,210,154,126,235,34,142,141
 27572 DEFB 201,37,235,229,205,160,137,225
 27580 DEFB 195,138,126,205,47,86,192,126
 27588 DEFB 183,60,240,61,245,230,16,202
 27596 DEFB 206,126,58,155,141,60,50,155
 27604 DEFB 141,241,230,8,238,8,192,58
 27612 DEFB 155,141,183,200,58,155,141,61
 27620 DEFB 50,155,141,60,201,35,126,254
 27628 DEFB 27,194,186,126,58,155,141,183
 27636 DEFB 194,186,126,58,165,141,183,194
 27644 DEFB 186,126,241,55,201,34,142,141
 27652 DEFB 58,144,141,61,50,144,141,201
 27660 DEFB 205,253,91,254,38,194,45,127
 27668 DEFB 42,136,139,126,254,32,202,43
 27676 DEFB 127,254,9,202,43,127,229,197
 27684 DEFB 205,104,92,205,57,127,193,225
 27692 DEFB 34,136,139,194,43,127

; Message at 27698
t27698 DEFM ">&2"

; Data block at 27701
b27701 DEFB 146,141,195,154,127,254,38,194
 27709 DEFB 45,127,58,146,141,183,194,50
 27717 DEFB 127,62,38,205,140,136,183,248
 27725 DEFB 245,175,50,146,141,241,201,42
 27733 DEFB 157,141,6,0,126,183,202,103
 27741 DEFB 127,17,41,140,26,190,194,92
 27749 DEFB 127,79,43,19,26,190,194,92
 27757 DEFB 127,13,194,76,127,120,246,128
 27765 DEFB 191,201,43,126,254,7,210,92
 27773 DEFB 127,4,195,62,127,58,166,141
 27781 DEFB 183,192,42,167,141,6,192,126
 27789 DEFB 183,202,152,127,17,41,140,26
 27797 DEFB 190,194,141,127,79,43,19,26
 27805 DEFB 190,194,141,127,13,194,127,127
 27813 DEFB 175,120,201,43,126,254,7,210
 27821 DEFB 141,127,4,195,113,127,60,201
 27829 DEFB 42,136,139,229,205,104,92,245
 27837 DEFB 205,57,127,194,211,127,71,241
 27845 DEFB 225,245,126,35,254,32,202,184
 27853 DEFB 127,254,9,194,192,127,229,205
 27861 DEFB 45,127,225,195,172,127,120,205
 27869 DEFB 45,127,241,71,245,241,194,31
 27877 DEFB 127,254,38,194,31,127,195,73
 27885 DEFB 92,241,225,245,34,136,139,205
 27893 DEFB 253,91,254,32,202,236,127,254
 27901 DEFB 9,202,236,127,205,73,92,195
 27909 DEFB 242,127,205,45,127,195,217,127
 27917 DEFB 205,196,92,194,199,127,195,1
 27925 DEFB 128,205,196,92,250,199,127,205
 27933 DEFB 45,127,195,251,127,205,253,91
 27941 DEFB 254,59,202,35,128,195,21,128
 27949 DEFB 205,23,137,205,45,127,254,13
 27957 DEFB 202,239,136,205,253,91,195,21
 27965 DEFB 128,205,23,137,205,23,137,254
 27973 DEFB 32,202,38,128,254,9,202,38
 27981 DEFB 128,183,205,62,137,34,187,141
 27989 DEFB 202,239,136,254,13,202,239,136
 27997 DEFB 62,13,205,140,136,195,239,136
 28005 DEFB 229,245,58,166,141,183,202,91
 28013 DEFB 128,213,235,42,179,141,25,52
 28021 DEFB 209,241,230,127,245,135,250,165
 28029 DEFB 128,42,161,141,126,183,202,148
 28037 DEFB 128,241,197,71,4,43,5,202
 28045 DEFB 127,128,126,213,47,95,22,255
 28053 DEFB 25,209,195,112,128,126,183,202
 28061 DEFB 162,128

; Message at 28063
t28063 DEFM "=G+"

; Data block at 28066
b28066 DEFB 126,4,5,202,162,128,205,52
 28074 DEFB 130,5,195,134,128,241

; Message at 28080
t28080 DEFM "+<="

; Data block at 28083
b28083 DEFB 202,159,128,43,195,151,128,126
 28091 DEFB 225,201,193,225,201,62,46,205
 28099 DEFB 52,130,205,52,130,241,230,63
 28107 DEFB 197,42,174,141,79,6,0,9
 28115 DEFB 68,205,202,104,69,205,202,104
 28123 DEFB 193,225,27,26,201,229,205,104
 28131 DEFB 92,225,196,222,128,245,17,41
 28139 DEFB 140,26,60,79,26,119,19,43
 28147 DEFB 13,194,212,128,241,201,254,13
 28155 DEFB 200,254,59,200,209,195,166,85
 28163 DEFB 6,0,197,229,43,205,219,92
 28171 DEFB 254,39,202,217,129,254,34,202
 28179 DEFB 217,129,254,60,202,247,129,254
 28187 DEFB 62,202,2,130,254,37,202,47
 28195 DEFB 129,254,44,202,12,130,254,32
 28203 DEFB 202,12,130,254,9,202,12,130
 28211 DEFB 254,59,202,12,130,254,33,204
 28219 DEFB 60,92,254,13,202,41,130,119
 28227 DEFB 43,205,253,91,195,240,128,34
 28235 DEFB 215,129,197,1,205,129,197,205
 28243 DEFB 118,119,235,14,0,58,61,140
 28251 DEFB 254,32,194,146,129,58,51,139
 28259 DEFB 254,16,202,138,129,254,8,202
 28267 DEFB 106,129,1,246,255,80,88,9
 28275 DEFB 19,218,87,129,229,235,124,181
 28283 DEFB 196,85,129,62,58,193,129,195
 28291 DEFB 194,129,175,41,206,48,205,174
 28299 DEFB 129,62,5,245,175,6,3,41
 28307 DEFB 143,5,194,119,129,198,48,205
 28315 DEFB 174,129,241,61,194,115,129,195
 28323 DEFB 146,129,68,205,154,129,69,205
 28331 DEFB 154,129,12,13,192,62,48,195
 28339 DEFB 194,129,120,31,31,31,31,205
 28347 DEFB 163,129,120,230,15,198,48,254
 28355 DEFB 58,218,174,129,198,7,12,13
 28363 DEFB 194,194,129,254,48,200,79,254
 28371 DEFB 58,218,194,129,62,48,205,194
 28379 DEFB 129,121,229,42,215,129

; Message at 28385
t28385 DEFM "w+\""

; Data block at 28388
b28388 DEFB 215,129,225,201,193,205,73,92
 28396 DEFB 42,215,129,195,41,129,0,0

; Message at 28404
t28404 DEFM "Ow+"

; Data block at 28407
b28407 DEFB 205,253,91,185,202,235,129,254
 28415 DEFB 13,202,46,130,195,218,129,119
 28423 DEFB 43,205,253,91,185,202,218,129
 28431 DEFB 195,240,128,4,5,202,254,129
 28439 DEFB 119,43,4,195,41,129,5,202
 28447 DEFB 41,129,250,17,130,195,39,129
 28455 DEFB 4,5,194,39,129,209,123,149
 28463 DEFB 61,18,193,235,42,136,139,43
 28471 DEFB 126,254,32,204,73,92,254,9
 28479 DEFB 204,73,92,235,201,4,5,202
 28487 DEFB 17,130,205,238,85,195,17,130
 28495 DEFB 245,229,33,12,140,205,150,94
 28503 DEFB 210,71,130,35,54,13,43,235
 28511 DEFB 225,241,201,225,241,18,19,201
 28519 DEFB 205,154,127,254,38,204,154,127
 28527 DEFB 254,58,202,154,127,254,33,208
 28535 DEFB 254,13,200,245,205,33,93,202
 28543 DEFB 108,130,205,47,86,202,125,104
 28551 DEFB 241,195,154,127,33,118,130,195
 28559 DEFB 124,94

; This comes from ASM.COM:
; https://www.iee.et.tu-dresden.de/~kc-club/09/RUBRIK23.HTM which is a CP/M
; assembler. Most of these messages appear to come from it, so quite a lot of
; the tool appears to be in here.
t28561 DEFM "?Stack overflow, try more P switches"

; Data block at 28597
b28597 DEFB 13,10,0,205

; Message at 28601
t28601 DEFM "vw:="

; Data block at 28605
b28605 DEFB 140,254,32,202,171,130,17,0
 28613 DEFB 0,235,34,147,141,205,90,126
 28621 DEFB 193,209,225,1,191,130,197,213
 28629 DEFB 62,13,195,101,85,193,1,186
 28637 DEFB 130,197,205,104,92,254,58,204
 28645 DEFB 104,92,205,164,126,202,224,130
 28653 DEFB 17,138,139,26,205,140,136,19
 28661 DEFB 254,13,194,213,130,201,175,205
 28669 DEFB 140,136,205,239,136,193,209,225
 28677 DEFB 33,219,83,229,213,42,185,141
 28685 DEFB 229,229,42,147,141,229,33,219
 28693 DEFB 83,229,33,2,131,229,197,201
 28701 DEFB 205,85,131,193,225,209,205,150
 28709 DEFB 94,194,49,131,58,156,141,183
 28717 DEFB 194,26,131,120,177,194,49,131
 28725 DEFB 42,142,141,229,205,229,135,225
 28733 DEFB 205,230,126,175,50,156,141,209
 28741 DEFB 213,42,149,141,229,235,233,213
 28749 DEFB 205,195,136,183,202,100,131,17
 28757 DEFB 138,139,205,217,136,205,52,130
 28765 DEFB 254,13,194,60,131,229,197,42
 28773 DEFB 151,141,229,42,153,141,229,42
 28781 DEFB 149,141,233,209,225,34,149,141
 28789 DEFB 225,34,153,141,225,34,151,141
 28797 DEFB 235,233,11,98,107,195,7,131
 28805 DEFB 58,144,141,183,202,238,85,50
 28813 DEFB 156,141,193,225,209,17,135,131
 28821 DEFB 213,229,197,175,50,155,141,195
 28829 DEFB 83,92,195,202,85,58,156,141
 28837 DEFB 183,202,230,131,193,1,237,82
 28845 DEFB 197,205,104,92,254,58,204,104
 28853 DEFB 92,205,47,86,192,183,240,79
 28861 DEFB 230,8,194,186,131,121,230,16
 28869 DEFB 194,194,131,121,230,32,194,202
 28877 DEFB 131,121,230,64,194,215,131,201
 28885 DEFB 58,155,141,61,50,155,141,201
 28893 DEFB 58,155,141,60,50,155,141,201
 28901 DEFB 58,155,141,183,192,58,53,139
 28909 DEFB 183,200,195,156,119,58,155,141
 28917 DEFB 183,192,35,126,254,8,200,62
 28925 DEFB 255,195,2,120,193,209,225,33
 28933 DEFB 219,83,229,213,197,201,183,245
 28941 DEFB 205,90,126,34,157,141,205,197
 28949 DEFB 128

; Message at 28950
t28950 DEFM "O:="

; Data block at 28953
b28953 DEFB 140,254,32,202,12,132,42,157
 28961 DEFB 141,205,230,126,241,201,121,54
 28969 DEFB 0,43,254,44,196,166,85,241
 28977 DEFB 245,202,72,132,205,60,92,254
 28985 DEFB 60,196,166,85,241,119,229,245
 28993 DEFB 14,0

; Message at 28995
t28995 DEFM "+:="

; Data block at 28998
b28998 DEFB 140,254,32,194,163,132,241,245
 29006 DEFB 71,202,86,132,205,232,128,12
 29014 DEFB 254,13,202,160,132,254,62,202
 29022 DEFB 163,132,195,55,132,205,54,92
 29030 DEFB 214,60,50,164,141,204,253,91
 29038 DEFB 195,34,132,205,253,91,254,13
 29046 DEFB 202,153,132,245,58,164,141,183
 29054 DEFB 202,123,132,241,17,163,132,213
 29062 DEFB 254,32,200,254,9,200,254,59
 29070 DEFB 200,254,44,200,209,195,147,132
 29078 DEFB 241,254,60,202,143,132,254,62
 29086 DEFB 194,147,132,4,5,202,163,132
 29094 DEFB 5,195,147,132,4,195,147,132
 29102 DEFB 12,119,43,195,86,132,58,164
 29110 DEFB 141,183,194,163,132,205,214,85
 29118 DEFB 54,0,43,205,138,126,120,183
 29126 DEFB 196,166,85,241,225,34,159,141
 29134 DEFB 38,0,105,34,147,141,193,209
 29142 DEFB 225,1,201,132,195,184,130,175
 29150 DEFB 194,62,1,195,240,131,193,1
 29158 DEFB 186,130,197,42,187,141,62,1
 29166 DEFB 50,166,141,229,205,76,130,245
 29174 DEFB 205,164,126,202,13,133,241,225
 29182 DEFB 254,13,202,18,128,254,59,202
 29190 DEFB 7,128,254,39,202,253,132,254
 29198 DEFB 34,202,253,132,205,154,127,195
 29206 DEFB 227,132,71,205,241,126,254,13
 29214 DEFB 202,18,128,184,202,247,132,195
 29222 DEFB 254,132,241,225,34,187,141,175
 29230 DEFB 205,140,136,205,239,136,193,209
 29238 DEFB 225,33,219,83,229,213,42,185
 29246 DEFB 141,229,229,42,159,141,229,42
 29254 DEFB 147,141,229,33,219,83,229,33
 29262 DEFB 56,133,229,197,201,205,85,131
 29270 DEFB 193,225,209,62,1,50,166,141
 29278 DEFB 34,161,141,225,205,150,94,194
 29286 DEFB 105,133,58,156,141,183,194,89
 29294 DEFB 133,120,177,194,105,133,42,161
 29302 DEFB 141,35,35,126,254,8,35,210
 29310 DEFB 94,133,43,195,29,131,235,213
 29318 DEFB 205,195,136,183,202,144,133,17
 29326 DEFB 138,139,205,195,136,183,252,74
 29334 DEFB 128,205,62,137,205,52,130,254
 29342 DEFB 13,194,117,133,229,42,161,141
 29350 DEFB 229,197,195,73,131,11,98,107
 29358 DEFB 209,195,77,133,205,219,92,254
 29366 DEFB 13,202,166,85,79,205,218,147
 29374 DEFB 205,60,92,254,13,202,178,133
 29382 DEFB 205,218,147,185,194,163,133,62
 29390 DEFB 13,205,218,147,62,10,205,218
 29398 DEFB 147,58,61,140,254,32,192,195
 29406 DEFB 83,92,205,219,92,254,13,202
 29414 DEFB 166,85,50,163,141,79,205,253
 29422 DEFB 91,254,13,202,224,133,185,202
 29430 DEFB 83,92,195,209,133,225,209,193
 29438 DEFB 1,233,133,195,184,130,193,1
 29446 DEFB 186,130,197,33,138,139,58,163
 29454 DEFB 141,79,126,185,202,1,134,254
 29462 DEFB 13,200,35,195,245,133,193,209
 29470 DEFB 225,33,219,83,229,213,197,201
 29478 DEFB 183,205,221,94,194,28,134,229
 29486 DEFB 35,35,94,35,86,205,229,135
 29494 DEFB 225,35,34,140,141,126,246,40
 29502 DEFB 119,205,90,126,34,157,141,14
 29510 DEFB 0,197,205,197,128,193,12,254
 29518 DEFB 44,202,44,134,175

; Message at 29523
t29523 DEFM "w+2"

; Data block at 29526
b29526 DEFB 165,141,50,171,141

; Message at 29531
t29531 DEFM "<w+\""

; Data block at 29535
b29535 DEFB 167,141,34,169,141,54,0,121
 29543 DEFB 50,176,141,205,140,136,175,205
 29551 DEFB 140,136,193,209,225,33,96,134
 29559 DEFB 229,213,197,201,193,1,186,130
 29567 DEFB 197,42,187,141,229,175,50,165
 29575 DEFB 141,50,166,141,205,76,130,245
 29583 DEFB 205,164,126,218,133,134,202,184
 29591 DEFB 134,241,50,165,141,225,195,227
 29599 DEFB 132,241,205,104,92,196,166,85
 29607 DEFB 42,169,141,245,194,154,134,58
 29615 DEFB 171,141,60,50,171,141,17,41
 29623 DEFB 140,26,60,79,26,119,43,19
 29631 DEFB 13,194,160,134,54,0,34,169
 29639 DEFB 141,241,254,44,202,134,134,225
 29647 DEFB 34,187,141,201,241,225,175,34
 29655 DEFB 187,141,205,140,136,205,239,136
 29663 DEFB 42,185,141,17,5,0,25,235
 29671 DEFB 42,179,141,25,58,171,141,119
 29679 DEFB 42,185,141,235,42,140,141,35
 29687 DEFB 115,35,114,42,157,141,205,230
 29695 DEFB 126,193,209,225,33,219,83,229
 29703 DEFB 213,197,201,229,55,205,156,94
 29711 DEFB 205,90,126,54,0,43,54,1
 29719 DEFB 34,161,141,43,14,0,205,232
 29727 DEFB 128,71,12,205,73,92,205,219
 29735 DEFB 92,254,13,202,42,135,254,59
 29743 DEFB 202,42,135,254,44,202,2,135
 29751 DEFB 120,254,32,202,2,135,254,9
 29759 DEFB 196,214,85,195,2,135,227,35
 29767 DEFB 35,94,35,86,235,205,217,136
 29775 DEFB 227,183,202,71,135,185,202,71
 29783 DEFB 135,218,71,135,54,0,43,12
 29791 DEFB 195,57,135,54,0,43,205,138
 29799 DEFB 126,225,193,205,217,136,229,42
 29807 DEFB 172,141,229,197,79,6,0,9
 29815 DEFB 34,172,141,193,42,161,141,229
 29823 DEFB 33,219,83,229,17,110,135,213
 29831 DEFB 197,201,205,85,131,225,34,161
 29839 DEFB 141,225,34,174,141,225,175,50
 29847 DEFB 166,141,205,195,136,183,202,166
 29855 DEFB 135,17,138,139,205,195,136,183
 29863 DEFB 252,74,128,205,62,137,205,52
 29871 DEFB 130,254,13,194,136,135,229,42
 29879 DEFB 174,141,229,42,161,141,229,195
 29887 DEFB 73,131,42,161,141,35,175,50
 29895 DEFB 156,141,195,34,131,125,147,95
 29903 DEFB 124,154,87,201,58,37,140,183
 29911 DEFB 194,208,85,205

; Message at 29915
t29915 DEFM "vw:="

; Data block at 29919
b29919 DEFB 140,254,32,192,50,37,140,42
 29927 DEFB 20,140,235,205,177,135,235,34
 29935 DEFB 38,140,201,58,37,140,183,204
 29943 DEFB 214,85,175,50,37,140,195,83
 29951 DEFB 92,33,183,141,78,115,35,70
 29959 DEFB 114,205,247,135,205,0,136,113
 29967 DEFB 35,112,201,42,179,141,25,94
 29975 DEFB 35,86,43,201,42,179,141,25
 29983 DEFB 35,35,94,35,86,43,201,42
 29991 DEFB 183,141,125,180,202,32,136,235
 29999 DEFB 213,205,0,136,235,34,183,141
 30007 DEFB 209,195,76,136,42,181,141,17
 30015 DEFB 32,0,235,25,34,181,141,213
 30023 DEFB 235,42,191,141,205,150,94,209
 30031 DEFB 218,154,137,42,142,141,37,58
 30039 DEFB 144,141,183,205,150,94,218,154
 30047 DEFB 137,42,179,141,235,205,177,135
 30055 DEFB 213,205,247,135,235,42,187,141
 30063 DEFB 235,123,230,224,95,123,178,194
 30071 DEFB 96,136,209,213,115,35,114,35
 30079 DEFB 62,0,119,35,119,205,0,136
 30087 DEFB 209,202,118,136,115,35,114,195
 30095 DEFB 123,136,235,34,185,141,235,42
 30103 DEFB 185,141,213,235,205,247,135,209
 30111 DEFB 115,35,114,123,246,4,95,201
 30119 DEFB 213,245,42,187,141,235,123,230
 30127 DEFB 31,204,11,136,42,179,141,25
 30135 DEFB 241,245,119,123,230,31,254,31
 30143 DEFB 202,168,136,19,204,178,136,235
 30151 DEFB 34,187,141,241,209,201,123,230
 30159 DEFB 224,95,205,0,136,122,179,202
 30167 DEFB 11,136,19,19,19,19,201,213
 30175 DEFB 235,42,179,141,235,125,230,31
 30183 DEFB 194,211,136,125,246,4,111,235
 30191 DEFB 25,126,235,209,201,205,195,136
 30199 DEFB 245,213,235,123,230,31,254,31
 30207 DEFB 202,232,136,19,204,178,136,235
 30215 DEFB 209,241,201,235,123,230,224,95
 30223 DEFB 213,205,0,136,123,178,193,200
 30231 DEFB 175,119,35,119,42,179,141,25
 30239 DEFB 115,35,114,197,205,229,135,193
 30247 DEFB 42,185,141,235,205,247,135,113
 30255 DEFB 35,112,201,42,187,141,213,235
 30263 DEFB 123,230,31,27,254,4,204,50
 30271 DEFB 137,42,179,141,235,34,187,141
 30279 DEFB 235,25,126,235,209,201,123,230
 30287 DEFB 224,95,205,247,135,123,246,31
 30295 DEFB 95,201,213,245,235,123,230,31
 30303 DEFB 254,31,202,74,137,19,204,178
 30311 DEFB 136,235,241,209,201,42,181,141
 30319 DEFB 235,42,142,141,58,144,141,183
 30327 DEFB 194,99,137,42,191,141,37,205
 30335 DEFB 177,135,218,121,94,122,183,202
 30343 DEFB 121,94,31,87,123,31,95,213
 30351 DEFB 42,179,141,235,42,181,141,205
 30359 DEFB 177,135,66,75,209,42,181,141
 30367 DEFB 235,25,34,181,141,120,177,202
 30375 DEFB 150,137,43,27,26,119,11,195
 30383 DEFB 137,137,34,179,141,201,205,160
 30391 DEFB 137,195,32,136,213,42,131,139
 30399 DEFB 235,42,179,141,205,177,135,218
 30407 DEFB 121,94,122,254,3,218,121,94
 30415 DEFB 31,87,123,31,95,225,197,229
 30423 DEFB 42,179,141,235,227,205,177,135
 30431 DEFB 66,75,209,42,179,141,229,42
 30439 DEFB 131,139,25,229,34,179,141,9
 30447 DEFB 34,181,141,225,209,120,177,202
 30455 DEFB 230,137,11,26,119,35,19,195
 30463 DEFB 217,137,193,201,50,238,140,50
 30471 DEFB 239,140,79,6,30,94,35,86
 30479 DEFB 35,229,197,205,8,138,193,225
 30487 DEFB 5,194,241,137,58,238,140,185
 30495 DEFB 196,16,106,201,1,0,0,197
 30503 DEFB 122,179
 30505 DEFB 202,125,104,235,229,94
 30511 DEFB 35,86,123,178,194,17,138,225
 30519 DEFB 125,180,200,205,54,138

; Message at 30525
t30525 DEFM "+V+"

; Data block at 30528
b30528 DEFB 94,123,178,202,27,138,175,119
 30536 DEFB 35

; Message at 30537
t30537 DEFM "w+++"

; Data block at 30541
b30541 DEFB 229,195,17,138,1,4,0,9
 30549 DEFB 126,34,129,139,230,127,200,254
 30557 DEFB 64,208,119,35,126,230,128,196
 30565 DEFB 22,139,43,70,35,126,245,35
 30573 DEFB 94,35,86,35,35,35,126,35
 30581 DEFB 205,1,149,5,194,88,138,241
 30589 DEFB 245,230,8,194,150,138,205,188
 30597 DEFB 138,205,2,139,241,245,95,230
 30605 DEFB 128,194,193,138,123,230,4,194
 30613 DEFB 199,138,123,230,64,196,210,138
 30621 DEFB 123,230,160,202,202,138,123,230
 30629 DEFB 3,95,22,0,33,27,107,25
 30637 DEFB 126,205,1,149,241,33,238,140
 30645 DEFB 53,194,177,138,58,239,140,119
 30653 DEFB 205,16

; Message at 30655
t30655 DEFM "j!u"

; Data block at 30658
b30658 DEFB 139

; Message at 30659
t30659 DEFM "4:t"

; Data block at 30662
b30662 DEFB 139,190,204,38,106,175,196,188
 30670 DEFB 138,42,129,139,126,246,64,119
 30678 DEFB 201,62,9,195,1,149,62,42
 30686 DEFB 202,62,77,202,62,67,202,62
 30694 DEFB 85,205,1,149,195,150,138,213
 30702 DEFB 197,42,129,139,229,35,123,230
 30710 DEFB 3,71,14,7,35,94,35,86
 30718 DEFB 35,213,94,35,86,235,34,32
 30726 DEFB 140,209,205,54,107,225,34,129
 30734 DEFB 139,35,126,230,32,196,92,107
 30742 DEFB 193,209,62,73,195,1,149,33
 30750 DEFB 61,140,34,59,140,205,127

; Message at 30757
t30757 DEFM "h*;"

; Data block at 30760
b30760 DEFB 140,54,0,33,61,140,195,139
 30768 DEFB 106,197,229,126,230,3,71,14
 30776 DEFB 6,35,94,35,86,205,92,107
 30784 DEFB 225,193,201,69,0,0,0,0
 30792 DEFB 0,2,0,0,0,0,10,0
 30800 DEFB 0,0,0,0,0,0,0,0
 30808 DEFB 0,0,0,0,0,0,0,0
 30816 DEFB 0,0,0,0,0,0,0,0
 30824 DEFB 0,0,0,0,0,0,0,0
 30832 DEFB 0,0,0,0,0,0,0,0
 30840 DEFB 0,0,0,0,0,0,0,0
 30848 DEFB 0,0,0,0,0,1,1,0
 30856 DEFB 33

; Move aliens
;
; March the aliens along and down
;.
; Used by the routine at #R24795.
@label=move_aliens
c30857 LD A,(24632)  ; Pick up this
 30860 LD B,A        ;
 30861 LD A,(24634)  ; Pick up that
 30864 CP B          ; A is bigger?
 30865 JR NC,30888   ;
 30867 LD (24632),A  ; Put that into this
 30870 LD A,(24633)  ; Pick up third thing
 30873 OR A          ; Zero?
 30874 JR NZ,30888   ;
 30876 LD A,(24632)  ;
 30879 CALL 27097    ; IX = 27327 + ( 'A' * 706 )
 30882 CALL 31119    ;
 30885 CALL 30959    ;
*30888 LD A,(24632)  ;
 30891 OR A          ;
 30892 JR NZ,30900   ;
 30894 CALL 31987    ; Sound burbler
 30897 DEFB 10,250,0 ; Aliens marching sound
*30900 CALL 27097    ;
 30903 CALL 31119    ;
 30906 LD A,(24633)  ;
 30909 OR A          ;
 30910 JR Z,30938    ;
 30912 CALL 30995    ;
 30915 LD A,(24632)  ;
 30918 OR A          ;
 30919 JR NZ,30933   ;
 30921 LD (24633),A  ;
 30924 LD A,(24635)  ;
 30927 NEG           ;
 30929 LD (24635),A  ;
 30932 RET           ;
*30933 DEC A         ;
 30934 LD (24632),A  ;
 30937 RET           ;
*30938 CALL 31064    ;
 30941 LD A,(24632)  ;
 30944 LD B,A        ;
 30945 LD A,(24634)  ;
 30948 CP B          ;
 30949 JR Z,30959    ;
 30951 LD A,(24632)  ;
 30954 INC A         ;
 30955 LD (24632),A  ;
 30958 RET           ;
*30959 LD A,(24635)  ;
 30962 CP 1          ;
 30964 JR Z,30978    ;
 30966 LD A,(31111)  ;
 30969 OR A          ;
 30970 JR NZ,30990   ;
*30972 LD A,1        ;
 30974 LD (24633),A  ;
 30977 RET           ;
*30978 LD A,(31111)  ;
 30981 LD B,A        ;
 30982 LD A,(31112)  ;
 30985 ADD A,B       ;
 30986 CP 32         ;
 30988 JR Z,30972    ;
*30990 XOR A         ;
 30991 LD (24632),A  ;
 30994 RET           ;

; Move aliens down
;
; Aliens have got to one side of the screen, move them down row by row. If
; they've got to the level of the barriers, remove the barriers. If they've got
; to the player's level then they've landed and the game will be flagged as
; over (actioned next game loop).
; .
; Used by the routine at #R30857.
@label=move_aliens_down
c30995 CALL 31987       ; Sound burbler
 30998 DEFB 8,250,0     ;
; Sound burbler return point
 31001 LD A,(31110)     ; Lowest alien position
 31004 CP 18            ; {Row 18 is top of barriers, remove them if the aliens
 31006 CALL NC,31327    ; are that far}
 31009 LD A,(31110)     ; Lowest alien position again
 31012 CP 21            ; {Row 21 is bottom of screen.
 31014 JR Z,31046       ;  If they've got this low it's game over }
 31016 LD B,A           ; {BC contains lowest alien ypos
 31017 LD C,0           ; }
 31019 CALL 32254       ; cxy2saddr: DE = screen address of lowest alien
 31022 CALL 26004       ; Clear one character row (32 chars)
                        ; Alien sprites are 2 chars high, this clears
			; the top of the alien's heads
 31025 LD BC,(31109)    ; Top alien ypos?
 31029 INC B            ; Alien xpos
; This entry point is used by the routine at #R31064.
*31030 LD IX,(31107)    ; Pointer to alien structure
 31034 LD (IX+0),C      ; New ypos
 31037 LD (IX+1),B      ; New xpos
 31040 CALL 31119       ;
 31043 JP 31198         ;
@label=aliens_landed
*31046 LD A,1           ; {Flag that the aliens have landed.
 31048 LD (24613),A     ; }
 31051 CALL 31987       ; Sound burbler
 31054 DEFB 250,100,250 ;
 31057 DEFB 200,250,250 ;
 31060 DEFB 250,250,0   ;
 31063 RET              ;
; This entry point is used by the routine at #R30857.
*31064 LD BC,(31109)    ;
 31068 LD A,(24635)     ;
 31071 ADD A,C          ;
 31072 LD C,A           ;
 31073 JR 31030         ;

; Initialise draw aliens
;
; This displays the bands of aliens - from the bottom upwards it's red, bleep,
; red, bleep, green, bleep, green, bleep, yellow.
;
; Used by the routine at #R24703.
@label=init_draw_aliens
c31075 LD A,4                       ;
*31077 LD (24632),A                 ;
 31080 CALL 27097                   ; IX = 27327 + ( 'A' * 706 )
 31083 CALL 31119                   ;
 31086 CALL 31198                   ;
 31089 CALL 31987                   ; Sound burbler, row of aliens appearing
 31092 DEFB 25,240,100,120,25,240,0 ;
; Sound burbler return point
 31099 LD A,(24632)                 ;
 31102 DEC A                        ;
 31103 JP P,31077                   ;
 31106 RET                          ;

; Unused
@label=_TEMP_IX_STASH
s31107 DEFS 2
@label=_NEXT_ALIEN_ROW_TO_DRAW
b31109 DEFB 0                       ; Next screen row to populate with aliens
@label=_LOWEST_ALIEN_YPOS
 31110 DEFB 0                       ; This one is right
@label=_ALIEN_ROW_LEFT_MARGIN
 31111 DEFB 0                       ; How far the aliens are from left side
@label=_ALIEN_ROW_BANK_WIDTH       
 31112 DEFB 0                       ; Width of this row, starts at 11 aliens, reduces
@label=_ALIEN_ROW_RIGHT_MARGIN
 31113 DEFB 0                       ; How far aliens are from the right side
@label=_ALIEN_SPRITE_DATA_PTR
 31114 DEFB 0,0                     ; Points to the left or right looking alien sprites
@label=_SPRITE_SCR_DEST
 31116 DEFB 0,0
@label=_SPRITE_DRAW_SCAN_COUNTER
 31118 DEFB 0

; Find alien row data
;
; Routine at 31119
; .
; Used by the routines at #R26154, #R30857, #R30995 and #R31075.
@label=maybe_find_alien_row_data
c31119 LD (31107),IX ; Stash IX
 31123 LD C,(IX+0)   ; Alien cypos
 31126 LD B,(IX+1)   ; Alien cxpos
 31129 LD (31109),BC ; Stash BC, C at lowest address
 31133 LD A,(24636)  ; Pick up something ???
 31136 INC A         ; Next
 31137 SLA A         ; A*2
 31139 LD C,A        ;
 31140 LD B,0        ;
 31142 ADD IX,BC     ; IX += A*2
 31144 LD A,(31109)  ; ypos in A
 31147 RRA           ; div 2
 31148 JR NC,31155   ; Every other one? ALiens are 2 bytes wide
 31150 LD BC,352     ; ???
 31153 ADD IX,BC     ; Add more to IX
*31155 LD (31114),IX ; ???
 31159 LD A,(31109)  ; {ypos in B
 31162 LD B,A        ; }
 31163 LD A,(24636)  ; ???
 31166 SLA A         ; x2
 31168 ADD A,B       ; 
 31169 LD (31111),A  ;
 31172 LD A,(24636)  ; Pick upsomething again ???
 31175 LD B,A        ;
 31176 LD A,(24637)  ;
 31179 SUB B         ;
 31180 SLA A         ;
 31182 LD (31112),A  ;
 31185 LD B,A        ;
 31186 LD A,(31111)  ;
 31189 ADD A,B       ;
 31190 SUB 32        ;
 31192 NEG           ;
 31194 LD (31113),A  ;
 31197 RET           ;

; Print one row of aliens
;
; Display a single row of aliens, the subroutine this calls displaying
; one scan line at a time. This code does 8 scan lines, which is the
; top half of the alien graphic data, then does it again with the bottom
; half of the alien graphic data.
;.
; Used by the routines at #R30995 and #R31075.
@label=print_alien_row
c31198 CALL 31303    ; Set attribute band on screen
 31201 LD BC,(31109) ; {Start with the top part of the UDG,
 31205 CALL 31213    ;  the alien's heads as it were, Call down.}
 31208 LD BC,(31109) ; {Back here, so do same again with B++, which does the feet.
 31212 INC B         ;  Drop through and out this time}
*31213 LD A,8        ; {8 scans, that's half an alien, vertically speaking
 31215 LD (31118),A  ; 16 pixel high sprites}
 31218 LD C,0        ; cx, start at extreme left
 31220 CALL 32254    ; DE = screen address of cy,cx
 31223 LD (31116),DE ; This variable holds the left side address of the screen scan line
*31227 CALL 31257    ; Takes #R31116 as screen location to draw to.
                     ; Takes #R31114 as sprite data to fill in.
                     ; Takes #R31111 as width of left margin to zero.
                     ; Takes #R31112 as width of alien bank.
                     ; Takes #R31113 as width of right margin to zero.
 31230 LD HL,(31114) ; {Pick up data pointer and add 22 bytes to it.
 31233 LD BC,22      ;  22 chars is 11 aliens, each 2 chars wide.
 31236 ADD HL,BC     ;  i.e. this advances the alien sprite data
 31237 LD (31114),HL ;  ready for displaying the next scan line.}
 31240 LD HL,(31116) ; {Next scan down
 31243 INC H         ;
 31244 LD (31116),HL ; }
 31247 LD A,(31118)  ; {One more scan drawn
 31250 DEC A         ;
 31251 LD (31118),A  ; }
 31254 JR NZ,31227   ; Back for the next of the 8 we do here
 31256 RET           ;

; Draw an alien sprite scan line
;
; This fills in a scan line of alien graphics, i.e. one pixel of the
; graphic data, drawn left to right. It zeroes out the left margin
; (width depending on how far the currently being drawn aliens have
; moved to the right) then fills in the bank of aliens (width depending
; on how many of the side aliens have been killed). It then zeroes out
; the right margin.
;.
; Used by the routine at #R31198.
;
; I: #R31116 Screen address to draw to
; I: #R31114 Sprite data to use
; I: #R31111 Number of left side scans to zero
; I: #R31112 Number of alien scans to draw
; I: #R31113 Number of right side scans to zero
@label=draw_alien_sprite_scan
c31257 LD DE,(31116) ; Screen address from here
 31261 LD A,(31111)  ; A is number of left side bytes to zero out
 31264 CALL 31281    ; Zero those bytes from DE
 31267 LD HL,(31114) ; HL is sprite data
 31270 LD BC,(31112) ; {C is number of alien scans to draw
 31274 LD B,0        ; }
 31276 LDIR          ; DE is end of zeroed bytes, draw from there across screen
 31278 LD A,(31113)  ; Pick up right side scans to zero out
                     ; and drop through
; Called from just above. Takes in A a count of consecutive
; bytes at DE which it writes 0 into
@label=zero_alien_sprite_scan
*31281 OR A          ; {If A is zero don't bother
 31282 RET Z         ; }
 31283 LD B,A        ; Byte counter comes from A
 31284 XOR A         ; We're writing zeroes
*31285 LD (DE),A     ; {Fill with zeroes from
 31286 INC DE        ;  DE onwards
 31287 DJNZ 31285    ; }
 31289 RET           ; Back with DE pointing to next byte

; Set INK colour of attributes
;
; Sets a number of attributes to given INK colour
;
; I:B first cy
; I:C first cx
; I:D Number of attributes to set
; I:E INK colour
@label=set_attributes_xy_n
c31290 CALL 32343    ; Find attribute address of cy,cx in BC
*31293 LD A,248      ; {Clear INK in attribute cell
 31295 AND (HL)      ; }
 31296 OR E          ; Merge in E
 31297 LD (HL),A     ; Set attribute cell
 31298 INC HL        ; Next cell
 31299 DEC D         ; Dec counter
 31300 JR NZ,31293   ;
 31302 RET           ;

; Set alien colour band
;
; Sets 2 rows of attributes to an INK colour, starting with
; the row in #R31109. The colour comes from a table indexed
; by the value at #R24632.
;.
; As the aliens move down the screen the bands of yellow,
; green, green, red, red need to move down with them. This
; sets the colour bands for one row of aliens
;.
; The alien band to set is passed in via #R24632 and provides
; the colour: top row (0) is yellow, row 1 is green, etc
;.
; #R31109 is cy; the cy is the attribute row to start at.
; #R24632 contains band to set colour, 0 being top alien row
;.
; Called from the routine at #R31198
@label=set_alien_colour_band
c31303 LD BC,(31109) ; cy from here goes into B
 31307 LD C,0        ; cx is 0, start of row
 31309 LD HL,24594   ; Colour bands table
 31312 LD A,(24632)  ; Alien row colours, 0 to 4 (top to bottom)
 31315 ADD A,L       ; {Find table entry
 31316 LD L,A        ;
 31317 JR NC,31320   ;
 31319 INC H         ; }
*31320 LD A,(HL)     ; Pick up INK colour from (HL)
 31321 LD E,A        ; E is INK colour
 31322 LD D,64       ; 2 full rows
 31324 JP 31290      ; Set INK colour of 64 cells from B,C

; Remove barriers when the aliens get low
;
; Clear 3 rows
; .
; Used by the routine at #R30995.
@label=remove_barriers
c31327 LD A,(24610)                     ; {If barriers are suppressed we don't
 31330 OR A                             ; need to clear them
 31331 RET Z                            ; }
 31332 LD DE,20608                      ;
 31335 CALL 26004                       ; Clear one character row (32 chars)
 31338 LD DE,20640                      ;
 31341 CALL 26004                       ; Clear one character row (32 chars)
 31344 LD DE,20672                      ;
 31347 CALL 26004                       ; Clear one character row (32 chars)
 31350 XOR A                            ; {Flag need to redraw barriers next
 31351 LD (24610),A                     ; screen}
 31354 CALL 31987                       ; Sound burbler
 31357 DEFB 200,10,10,200,200,10,10,200 ;
 31365 DEFB 200,10,50,250,0             ;
; Sound burbler return point
 31370 RET                              ;

; UDGs which make up the barriers.
;
; Data block at 31371
b31371 DEFB 255,255,255,255,255,255,255,255 ; #HTML[#UDG31371,8(0)]
 31379 DEFB 3,15,31,63,127,127,255,255      ; #HTML[#UDG31379,8(1)]
 31387 DEFB 192,240,248,252,254,254,255,255 ; #HTML[#UDG31387,8(2)]
 31395 DEFB 252,240,224,192,128,128,0,0     ; #HTML[#UDG31395,8(3)]
 31403 DEFB 63,15,7,3,1,1,0,0               ; #HTML[#UDG31403,8(4)]
 31411 DEFB 255,255,255,255,255,255,0,0     ; #HTML[#UDG31411,8(5)]

; Barrier top row string
;
; 4 UDGs which render, in the internal "font", as top row of a barrier
@label=_BARRIER_TOP
t31419 DEFM "1002",0

; Barrier middle row string
;
; 4 UDGs which render, in the internal "font", as middle row of a barrier
@label=_BARRIER_MIDDLE
t31424 DEFM "0000",0

; Barrier bottom row string
;
; 4 UDGs which render, in the internal "font", as bottom row of a barrier
@label=_BARRIER_BOTTOM
t31429 DEFM "5345",0

; Unused
@label=_DRAW_BARRIER_COUNT
s31434 DEFS 1

; Unused
@label=_BARRIER_ROWS_TO_DRAW
s31435 DEFS 1

; Draw barriers
;
; The barriers are built from UDGs. Each barrier is 3 rows of chars high, and
; each row is printed as a string using a special "font".
; .
; Used by the routine at #R24703.
@label=draw_barriers
c31436 LD A,(24610)  ; {Barriers suppressed flag, this has to be zero otherwise
 31439 OR A          ; the barriers aren't drawn
 31440 RET NZ        ; }
 31441 LD HL,(23606) ; {Stash default font address on stack
 31444 PUSH HL       ; }
 31445 LD HL,30987   ; {Switch to the UDGs here. In theory this is the  start
 31448 LD (23606),HL ; of the "font", but we only use UDGs starting at char
                     ; '0'. Char '0' is 48 decimal, 48*8 is 384,
                     ; 30987+384=#R31371}
 31451 LD A,3        ; {We need to draw 3 barriers
 31453 LD (31434),A  ; }
 31456 LD BC,5125    ; Y=20, X=05
*31459 LD HL,31419   ; Sequence of UDGs which display a row of the barrier
 31462 PUSH BC       ;
 31463 LD A,3        ; {The graphic is 3 rows per barrier
 31465 LD (31435),A  ; }
*31468 CALL 32311    ; Draw a barrier row using the UDG printer code
 31471 DEC C         ; {X=X-4
 31472 DEC C         ;
 31473 DEC C         ;
 31474 DEC C         ; }
 31475 INC B         ; Y=Y+1
 31476 LD A,(31435)  ; {Barrier row drawn
 31479 DEC A         ;
 31480 LD (31435),A  ; }
 31483 JR NZ,31468   ; Back for next row
 31485 POP BC        ;
 31486 LD A,C        ; {Move X along 9 chars ready for next barrier
 31487 ADD A,9       ;
 31489 LD C,A        ; }
 31490 LD A,(31434)  ; {One more barrier has been drawn
 31493 DEC A         ;
 31494 LD (31434),A  ; }
 31497 JR NZ,31459   ; Back to do the next one
 31499 POP HL        ; {Recover default font address and put it back
 31500 LD (23606),HL ; }
 31503 LD A,1        ; {Barriers are drawn, flag not to redraw them.
 31505 LD (24610),A  ; }
 31508 RET           ;

; Data block at 31509
b31509 DEFB 0,0,254,0,255,0,1,0
 31517 DEFB 2,0,255,255,1,255,255,1
 31525 DEFB 1,1

; Routine at 31527
;
; Used by the routines at #R25853 and #R26541.
c31527 LD A,(24610)  ; {Return immediately if the barriers are suppressed
 31530 OR A          ;
 31531 RET Z         ; }
 31532 LD (31509),BC ;
 31536 LD A,B        ;
 31537 CP 162        ;
 31539 JR C,31632    ;
 31541 CP 184        ;
 31543 JR NC,31632   ;
 31545 CALL 31653    ;
 31548 RET Z         ;
 31549 CALL 32059    ;
 31552 LD IX,31511   ;
 31556 LD A,8        ;
 31558 LD (31434),A  ;
*31561 LD A,(31509)  ;
 31564 ADD A,(IX+0)  ;
 31567 LD C,A        ;
 31568 LD A,(31510)  ;
 31571 ADD A,(IX+1)  ;
 31574 LD B,A        ;
 31575 INC IX        ;
 31577 INC IX        ;
 31579 LD A,(32055)  ;
 31582 RLA           ;
 31583 LD (32055),A  ;
 31586 CALL C,31640  ;
 31589 LD A,(31434)  ;
 31592 DEC A         ;
 31593 LD (31434),A  ;
 31596 JR NZ,31561   ;
 31598 LD BC,(31509) ;
 31602 CALL 31640    ;
 31605 LD BC,(31509) ;
 31609 INC B         ;
 31610 CALL 31640    ;
 31613 LD BC,(31509) ;
 31617 DEC B         ;
 31618 CALL 31640    ;
 31621 CALL 31987    ; Sound burbler
 31624 DEFB 4,20     ; ???
 31626 INC B         ;
 31627 LD E,0        ;
 31629 OR 1          ;
 31631 RET           ;
*31632 XOR A         ;
 31633 RET           ;

; Set pixel
;
; Sets the screen pixel at x,y
; .
; This is the entry in the jump table handled by the routine at 32374 when that
; code is called with A=0
;
; I:B ypos
; I:C xpos
@label=pixel_set
c31634 CALL 31922    ; pxy2saddr of B=ypos, C=xpos
 31637 OR (HL)       ; Pick up screen byte
 31638 LD (HL),A     ; Merge in the required pixel
 31639 RET           ;

; Clear pixel
;
; Clears the screen pixel at x,y
; .
; This is the entry in the jump table handled by the routine at 32374 when that
; code is called with A=1
;
; I:B ypos
; I:C xpos
@label=pixel_clear
c31640 CALL 31922    ; pxy2saddr of B=ypos, C=xpos
 31643 CPL           ; Invert pixel map
 31644 AND (HL)      ; Pick up screen byte
 31645 LD (HL),A     ; Merge out the required pixel
 31646 RET           ;

; XOR pixel
;
; XORs the screen pixel at x,y
; .
; This is the entry in the jump table handled by the routine at 32374 when that
; code is called with A=2
;
; I:B ypos
; I:C xpos
@label=pixel_xor
c31647 CALL 31922    ; pxy2saddr of B=ypos, C=xpos
 31650 XOR (HL)      ; Toggle screen bit
 31651 LD (HL),A     ; XOR in the required pixel
 31652 RET           ;

; Clear screen byte but leave pixel
;
; Clears the screen byte containing the screen pixel at x,y, leaving the
; indicated pixel on if it's already on, or off if it's already off.
; .
; This is the entry in the jump table handled by the routine at 32374 when that
; code is called with A=3
;
; I:B ypos
; I:C xpos
@label=pixel_clearbyte
c31653 CALL 31922    ; pxy2saddr of B=ypos, C=xpos
 31656 AND (HL)      ; Clear byte except the indicated pixel which is left
 31657 RET           ;

; Screen address calculation table, used by px2saddr
@label=_PIXEL_DATA
b31658 DEFB 128,64,32,16,8,4,2,1
@label=_PX2SADDR_DATA
 31666 DEFB 0,8,16,24,32,40,48,56
 31674 DEFB 1,9,17,25,33,41,49,57
 31682 DEFB 2,10,18,26,34,42,50,58
 31690 DEFB 3,11,19,27,35,43,51,59
 31698 DEFB 4,12,20,28,36,44,52,60
 31706 DEFB 5,13,21,29,37,45,53,61
 31714 DEFB 6,14,22,30,38,46,54,62
 31722 DEFB 7,15,23,31,39,47,55,63
 31730 DEFB 64,72,80,88,96,104,112,120
 31738 DEFB 65,73,81,89,97,105,113,121
 31746 DEFB 66,74,82,90,98,106,114,122
 31754 DEFB 67,75,83,91,99,107,115,123
 31762 DEFB 68,76,84,92,100,108,116,124
 31770 DEFB 69,77,85,93,101,109,117,125
 31778 DEFB 70,78,86,94,102,110,118,126
 31786 DEFB 71,79,87,95,103,111,119,127
 31794 DEFB 128,136,144,152,160,168,176,184
 31802 DEFB 129,137,145,153,161,169,177,185
 31810 DEFB 130,138,146,154,162,170,178,186
 31818 DEFB 131,139,147,155,163,171,179,187
 31826 DEFB 132,140,148,156,164,172,180,188
 31834 DEFB 133,141,149,157,165,173,181,189
 31842 DEFB 134,142,150,158,166,174,182,190
 31850 DEFB 135,143,151,159,167,175,183,191
 31858 DEFB 0,8,16,24,32,40,48,56
 31866 DEFB 1,9,17,25,33,41,49,57
 31874 DEFB 2,10,18,26,34,42,50,58
 31882 DEFB 3,11,19,27,35,43,51,59
 31890 DEFB 132,140,148,156,164,172,180,188
 31898 DEFB 133,141,149,157,165,173,181,189
 31906 DEFB 134,142,150,158,166,174,182,190
 31914 DEFB 135,143,151,159,167,175,183,191

; pxy2saddr
;
; Calculate the address of the display file byte and the pixel within it of the
; x,y pixel coords in C and B.
; .
; Used by the routines at #R31634, #R31640 and #R31653.
;
; I:B ypos in pixels,
; I:C xpos in pixels
; O:HL display file byte address
; O:A display file byte's pixel
@label=px2saddr
c31922 LD HL,31666   ; Table of clever values
 31925 LD E,B        ; {DE is 8 bit y pos
 31926 LD D,0        ; }
 31928 ADD HL,DE     ; Add offset to the table
 31929 LD H,(HL)     ; H comes from that table location
 31930 LD L,C        ; L is xpos
 31931 AND A         ; Clear carry
 31932 RR H          ; {HL = HL / 2
 31934 RR L          ; }
 31936 SCF           ; Set carry, this primes the 0x40.. display file address
 31937 RR H          ; {HL = HL /2
 31939 RR L          ; }
 31941 AND A         ; Clear carry
 31942 RR H          ; {HL = HL / 2
 31944 RR L          ; }
 31946 EX DE,HL      ; Result into DE for the moment
 31947 LD HL,31658   ; Divisor table
 31950 LD A,C        ; xpos
 31951 AND 7         ; Bottom 3 bits - 0 to 7
 31953 LD C,A        ; {BC = offset into divisor table
 31954 LD B,0        ; }
 31956 ADD HL,BC     ; Find divisor table location
 31957 LD A,(HL)     ; A = pixel in the byte
 31958 EX DE,HL      ; Restore display file address into HL
 31959 RET           ;

; Draw or undraw sprite
;
; Draws or clears a sprite using a sequence of pixel sets or clears.
; .
; Used by the routines at #R25442, #R25853, #R26020, #R26675, #R26916 and
; #R26947.
;
; I:A Mode for pixel (0=set,1=clear,2=XOR,3=ClearByte)
; I:HL Sprite data, list of x,y offset pairs, 0xFF to end
; I:IX Pointer to xpos,ypos screen location (chars)
@label=sprite_draw_or_clear
c31960 CALL 32374    ; Prime jump at 32362, consumes A
*31963 LD A,(HL)     ; {Pick up next byte in sequence. x_offset End if negative
 31964 INC HL        ; number
 31965 OR A          ;
 31966 RET M         ; }
 31967 ADD A,(IX+0)  ; IX+0 points to xpos
 31970 LD C,A        ; C=xpos + x_offset
 31971 LD A,(HL)     ; {Pick up next byte in sequence. y_offset
 31972 INC HL        ; }
 31973 ADD A,(IX+1)  ; IX+1 points to ypos
 31976 LD B,A        ; B=ypos + y_offset
 31977 PUSH HL       ;
 31978 CALL 32362    ; Update pixel at C,B according to input mode
 31981 POP HL        ;
 31982 JR 31963      ; Go back for next pixel in the sprite data

; Data block at 31984
@label=_BURBLER_DE_STASH
s31984 DEFS 2        ; Temp store for DE while sound burbler runs

; Data block at 31986
@label=_BURBLER_PORT254_SHADOW
b31986 DEFB 0        ; Beeper's border protection value is stored here

; Sound burbler
;
; Loop over a sequence of pitch/length pairs, calling the beeper with each. The
; data sequence is at the caller location, so this picks it up from the return
; address.
; .
; This contains the rolling border effect which accompanies the end of game
; siren, etc.
; .
; It walks the sequence and stops when DE is pointing to a zero byte. It
; returns to that location+1
@label=sound_burbler
c31987 LD (31984),DE ; Save DE somewhere
 31991 POP DE        ; DE takes return address from the stack
 31992 PUSH BC       ; Save
 31993 PUSH AF       ; Save
 31994 PUSH HL       ; Save
 31995 LD A,(23624)  ; Pick up port 254 shadow
 31998 AND 56        ; Bottom 3 bits zero
 32000 RRCA          ; Rotate down 3 bits, sets the border colour
 32001 RRCA          ;
 32002 RRCA          ;
 32003 OR 8          ; Set the MIC bit
 32005 LD (31986),A  ; Save result, it's picked up by the beeper routine
*32008 LD A,(DE)     ; DE was pointing to something interesting
 32009 INC DE        ; Next byte, whatever it is
 32010 OR A          ; {If it's zero we're done and DE is pointing to the
 32011 JR Z,32025    ; location to return to}
 32013 LD L,A        ; Low byte from (DE) into L, it's a count of something
 32014 LD A,(DE)     ; High byte from (DE) into A, it's the pitch
 32015 INC DE        ; Move on ready for next one
 32016 LD C,A        ; Pitch goes into C
*32017 CALL 32034    ; Toggle beeper bit according to pitch
 32020 DEC L         ; {Reduce the counter and do it again
 32021 JR NZ,32017   ; }
 32023 JR 32008      ; Next note, or whatever it is
*32025 POP HL        ; Restore
 32026 POP AF        ; Restore
 32027 POP BC        ; Restore
 32028 PUSH DE       ; Restore return address
 32029 LD DE,(31984) ; Put DE back as it was at entry
 32033 RET           ;

; Click speaker bit, causes 2 clicks separated by the given pitch
;
; This calls the toggle speaker routine for one click, makes a very brief delay
; (4 NOPs) then drops through to the toggle_speaker routine which follows to
; toggle the bit back again.
; .
; The pitch is implemented in the routine this calls.
;
; Input:C Pitch
@label=click_speaker
c32034 LD A,(31986)  ; Pick up saved border colour
 32037 CALL 32044    ; Call forward to the toggle routine then drop through and
                     ; do it again
 32040 LD B,4        ; {13Ts delay times 4 then drop through
*32042 DJNZ 32042    ; }
; Toggle speaker bit, causes a click based on the given pitch A small delay
; based on pitch, then toggle the speaker bit for a single click. Input:C Pitch
@label=toggle_speaker
*32044 LD B,C        ; C contains a delay factor
*32045 NOP           ; 4Ts
 32046 NOP           ; 4Ts
 32047 NOP           ; 4Ts
 32048 DJNZ 32045    ; 12*C Ts delay
 32050 XOR 16        ; {Toggle speaker bit
 32052 OUT (254),A   ; }
 32054 RET           ;

; Data block at 32055
b32055 DEFB 186

; Message at 32056
b32056 DEFB 93

; Cycling value
;
; This appears to be a value which is constantly incremented, and allowed
; to cycle. The low byte is used to decide on the "random" bonus amount
; for hitting a spaceship.
@label=_CYCLING_VALUE_H
b32057 DEFB 108
@label=_CYCLING_VALUE_L
 32058 DEFB 77

; Routine at 32059
;
; Used by the routines at #R25749 and #R31527.
c32059 LD HL,(32057) ;
 32062 RL L          ;
 32064 RL H          ;
 32066 RL L          ;
 32068 RL H          ;
 32070 LD C,H        ;
 32071 LD A,(32055)  ;
 32074 RLA           ;
 32075 LD B,A        ;
 32076 LD DE,(32056) ;
 32080 RL E          ;
 32082 RL D          ;
 32084 RES 7,D       ;
 32086 LD HL,(32055) ;
 32089 ADD HL,BC     ;
 32090 LD (32055),HL ;
 32093 LD HL,(32057) ;
 32096 ADC HL,DE     ;
 32098 RES 7,H       ;
 32100 LD (32057),HL ;
 32103 RET P         ;
 32104 LD HL,32055   ;
*32107 INC HL        ;
 32108 RET NZ        ;
 32109 INC HL        ;
 32110 JR 32107      ;

; Printable score
;
; 5 bytes for the 5 chars of the score. These are
; held as 1,2,3, etc., not '1','2','3'.
@label=_PRINTABLE_SCORE_DIGITS
b32112 DEFS 5
; These are the numbers 10000, 1000, 100, 10 and 1
; as 16 bit values. Pairs are 5 bytes apart, so
; for example 10000 is 39*256+16.
@label=_PRINT_SCORE_10_DIVS
 32117 DEFB 39,3,0,0,0,16,232,100,10,1

; Generate printable score
;
; Take the current score and divide it by 10000 repeatedly until
; there's less than 10000 left. However many of those we did,
; that goes into the leftmost printable score digit. Move along
; one, reduce the divisor to 1000, and do it again.
;.
; Used by the routine at #R24935.
;
; I:HL Current score
; O:IX Pointing to 5 digit printable score string
@label=gen_printable_score
c32127 LD IX,32112   ; Divisor table is 5 bytes past this
 32131 LD B,5        ; Score is printed as 5 chars wide
*32133 LD D,(IX+5)   ; {DE contains divisor, 10000, 1000,
 32136 LD E,(IX+10)  ;  100, 100 or 1}
 32139 OR 255        ; A=-1
*32141 SBC HL,DE     ; Subtract the divisor
 32143 INC A         ; {If no carry we had at least that many
 32144 JR NC,32141   ;  in the score and go around again}
 32146 ADD HL,DE     ; There was a carry, put that last lot back
 32147 LD (IX+0),A   ; A contains number of divisors (i.e. the digit)
 32150 INC IX        ; {Move to next digit, and
 32152 DJNZ 32133    ; go round again}
 32154 LD IX,32112   ; Exit with IX pointing at the string result
 32158 RET           ;

; Find digit char UDG
;
; Find the UDG for the digit in A
;.
; Used by the routine at #R24935.
;
; I:A digit, 0 to 9
; O:HL address of entry in table at #R32174
@label=find_digit_udg
c32159 LD HL,32174   ; Address of '0'
 32162 SLA A         ; x2
 32164 SLA A         ; x4
 32166 SLA A         ; x8
 32168 ADD A,L       ; {Add A to table
 32169 LD L,A        ;
 32170 JR NC,32173   ; }
 32172 INC H         ; Adjust for carry
*32173 RET           ; HL contains address of digit

; Character set for scores
;
; #UDG32174  #UDG32182  #UDG32190  #UDG32198  #UDG32206
; #UDG32214  #UDG32222  #UDG32230  #UDG32238  #UDG32246
@label=_SCORES_CHAR_SET
b32174 DEFB 126,126
 32176 DEFB 102,102,102,102
 32180 DEFB 126,126,24,24,24,24,24,24
 32188 DEFB 24,24,126,126,6,126,126,96
 32196 DEFB 126,126,126,126,6,126,126,6
 32204 DEFB 126,126,96,96,108,108,126,126
 32212 DEFB 12,12,126,126,96,126,126,6
 32220 DEFB 126,126,126,126,96,126,126,102
 32228 DEFB 126,126,126,126,6,6,6,6
 32236 DEFB 6,6,126,126,102,126,126,102
 32244 DEFB 126,126,126,126,102,126,126,6
 32252 DEFB 126,126

; cxy2saddr
;
; Screen address of top pixel row of character square at x,y.
; .
; Used by the routines at #R26337, #R30995, #R31198 and #R32275.
;
; I:C xpos char
; I:B ypos char
; O:DE Screen address
@label=cxy2saddr
c32254 LD D,B        ; {No idea how this is working. asm_zx_cxy2saddr in z88dk
 32255 XOR A         ; is more efficient
 32256 RR B          ;
 32258 RRA           ;
 32259 RR B          ;
 32261 RRA           ;
 32262 RR B          ;
 32264 RRA           ;
 32265 OR C          ;
 32266 LD E,A        ;
 32267 LD B,D        ;
 32268 LD A,24       ;
 32270 AND D         ;
 32271 OR 64         ;
 32273 LD D,A        ; }
 32274 RET           ;

; Print UDG at HL to screen at BC
;
; Plots 8 scan bytes in the character cell at C,B from the UDG at HL. HL can
; point to the char set in ROM.
; .
; Used by the routines at #R24935 and #R32307.
;
; I:C char xpos
; I:B char ypos
; I:HL UDG data, 8 consecutive bytes
@label=print_udg
c32275 CALL 32254    ; cxy2saddr: DE = screen address of char C,B
 32278 LD B,8        ; 8 scans, top to bottom
*32280 LD A,(HL)     ; Pick up data byte
 32281 INC HL        ; Move to next
 32282 LD (DE),A     ; Load into screen
 32283 INC D         ; Move down a scan
 32284 DJNZ 32280    ; Back for next
 32286 RET           ;

; Clear screen pixel data
;
; Zeroes 6144 bytes starting at 0x4000
@label=clear_pixels
c32287 LD HL,16384   ; Start of screen
 32290 LD C,24       ; Run this loop 24 times
 32292 XOR A         ; Zero
 32293 LD B,A        ;
*32294 LD (HL),A     ; Load zero into screen location
 32295 INC HL        ;
 32296 DJNZ 32294    ; {Clear 256 bytes 24 times
 32298 DEC C         ; }
 32299 JR NZ,32294   ;
 32301 RET           ;

; Print string at return address
;
; String to print follows the caller CALL instruction. Return address is popped
; into HL, and that's used as the location of the string. It then jumps to the
; instruction which follows the string.
; .
; Used by the routines at #R24989 and #R25160.
@label=print_string_at_caller
c32302 POP HL        ; Pick up return address, that's the data
 32303 CALL 32307    ; Call the string printer routine
 32306 JP (HL)       ; Now 'return' to the code at the end of the data

; Print positioned string at HL
;
; String data format is Y,X,c,c,c...
; .
; Used by the routine at #R32302.
;
; I:HL Address of string
@label=print_string_yxt_at_hl
c32307 LD C,(HL)     ; {HL points to ypos,xpos. Put those in BC, incrementing
 32308 INC HL        ; HL
 32309 LD B,(HL)     ; }
 32310 INC HL        ; Drop into #R32311

; Print string at HL
;
; This entry point is used by the routine at #R31436.
;
; I:B xchar
; I:C ychar
; I:HL char sequence
@label=print_string_at_hl
c32311 LD A,(HL)     ; {Pick up byte at HL, return if zero which indicates the
 32312 INC HL        ; end of the string
 32313 OR A          ;
 32314 RET Z         ; }
 32315 PUSH BC       ;
 32316 PUSH HL       ;
 32317 CALL 32398    ; HL = (A * 8) + (_CURRENT_FONT)
 32320 CALL 32275    ; Draw UDG
 32323 POP HL        ;
 32324 POP BC        ;
 32325 INC C         ; xpos++
 32326 LD A,C        ;
 32327 CP 32         ; Edge of screen?
 32329 JR NZ,32311   ; No, back for next char
 32331 LD C,0        ; {Move to start of next line
 32333 INC B         ;
 32334 LD A,B        ; }
 32335 CP 24         ; Off bottom of screen?
 32337 JR NZ,32311   ; No, back for next char
 32339 LD B,0        ; Wrap to top of screen
 32341 JR 32311      ; Now back to next char

; Attribute address finder, cx,cy to attr address
;
; Find attribute address from cx,cy
;
; I:B cy
; I:C cx
; O:HL aaddr of cx,cy
@label=cxy2aaddr
c32343 LD A,B        ;
 32344 OR 192        ; Input B with top 2 bits now set
 32346 LD L,A        ;
 32347 LD H,2        ; HL is now 0x02Cx, where x came from B
 32349 ADD HL,HL     ; x2
 32350 ADD HL,HL     ; x4
 32351 ADD HL,HL     ; x8
 32352 ADD HL,HL     ; x16
 32353 ADD HL,HL     ; x32 - HL now at start of row cy
 32354 LD A,C        ; Pick up cx from input parameter
 32355 ADD A,L       ; {Add as offset
 32356 LD L,A        ; }
 32357 RET NC        ; {If cx was greater than 32 move to next row
 32358 INC H         ; }
 32359 RET           ; Result address in HL

; A 2 byte entry from the table at 32362 is copied into here by the ship
; drawing routine. It's used as a destination for the jump at 32362
@label=_UPDATE_PIXEL_TRAMPOLINE
s32360 DEFS 2

; Update pixel
;
; Jump to pre-selected display update routine primed at address 32360. This
; will set, clear, XOR or clear-byte of xpos,ypos in C and B
;
; I:B ypos
; I:C xpos
@label=update_pixel
c32362 LD HL,(32360) ;
 32365 JP (HL)       ;

; This is a jump table with 4 entries.
;
; 0x7B92, 0x7B98, 0x7B9F, 0x7BA5 31634   31640   31647   31653
@label=_UPDATE_PIXEL_JUMP_TABLE
b32366 DEFB 146,123,152,123,159,123,165,123

; Prime pixel update
;
; Sets up a call to 32362 ready to update a screen pixel according to the mode
; passed in here.
; .
; Select an entry from the jump table at 32366, copy the entry to the 2 bytes
; of storage at 32360. This primes the jump code at 32362 with A=0 31634 (set
; routine) A=1 31640 (clear) A=2 31647 (xor) A=3 31653 (clear byte)
;
; Input:A 0 to 3, mode. 0=Set, 1=Clear, 2=XOR, 3=Clear byte
@label=prime_update_pixel_trampoline
c32374 PUSH HL       ; Save regs
 32375 PUSH BC       ;
 32376 AND 3         ; Bottom 2 bits only
 32378 LD L,A        ; HL = A
 32379 LD H,0        ;
 32381 ADD HL,HL     ; HL = Ax2
 32382 LD BC,32366   ; Jump table
 32385 ADD HL,BC     ; Select the entry from input value into HL
 32386 LD BC,32360   ; 2 byte result goes here
 32389 LD A,(HL)     ; {Copy 2 bytes from jump table entry to result
 32390 LD (BC),A     ;
 32391 INC HL        ;
 32392 INC BC        ;
 32393 LD A,(HL)     ;
 32394 LD (BC),A     ; }
 32395 POP BC        ; Restore regs
 32396 POP HL        ;
 32397 RET           ;

; Find character
;
; Given a character code in A, this finds the location of that char's bytes in
; the font pointed to by 23606.
; .
; The code multiplies A by 8 and adds (23606)
; .
; Used by the routine at #R32307.
;
; I:A Char code ('A'=65, etc);
; O:HL Address of top scan of data
@label=find_char
c32398 PUSH BC       ;
 32399 LD L,A        ; {A into HL
 32400 LD H,0        ; }
 32402 ADD HL,HL     ; x2
 32403 ADD HL,HL     ; x4
 32404 ADD HL,HL     ; x8
 32405 LD BC,(23606) ; {Add on start of font address
 32409 ADD HL,BC     ; }
 32410 POP BC        ;
 32411 RET           ; Result in HL

; Data block at 32412
b32412 DEFB 0,0,0,0,0,0,0,0
 32420 DEFB 0,0,0,0,0,0,0,0
 32428 DEFB 0,0,0,0,0,0,0,0
 32436 DEFB 0,0,0,0,0,0,0,0
 32444 DEFB 0,0,0,0,0,0,0,0
 32452 DEFB 0,0,0,0,0,0,0,0
 32460 DEFB 0,0,0,0,0,0,0,0
 32468 DEFB 0,0,0,0,0,0,0,0
 32476 DEFB 0,0,0,0,0,0,0,0
 32484 DEFB 0,0,0,0,0,0,0,0
 32492 DEFB 0,0,0,0,0,0,0,0
 32500 DEFB 0,0,0,0,0,0,0,0
 32508 DEFB 0,0,0,0,0,0,0,0
 32516 DEFB 0,0,0,0,0,0,0,0
 32524 DEFB 0,0,0,0,0,0,0,0
 32532 DEFB 0,0,0,0,0,0,0,0
 32540 DEFB 0,0,0,0,0,0,0,0
 32548 DEFB 0,0,0,0,0,0,0,0
 32556 DEFB 0,0,0,0,0,0,0,0
 32564 DEFB 0,0,0,0,0,0,0,0
 32572 DEFB 0,0,0,0,0,0,0,0
 32580 DEFB 0,0,0,0,0,0,0,0
 32588 DEFB 0,0,0,0,0,0,0,0
 32596 DEFB 0,0,0,0,0,0,0,0
 32604 DEFB 0,0,0,0,0,0,0,0
 32612 DEFB 0,0,0,0,0,0,0,0
 32620 DEFB 0,0,0,0,0,0,0,0
 32628 DEFB 0,0,0,0,0,0,0,0
 32636 DEFB 0,0,0,0,0,0,0,0
 32644 DEFB 0,0,0,0,0,0,0,0
 32652 DEFB 0,0,0,0,0,0,0,0
 32660 DEFB 0,0,0,0,0,0,0,0
 32668 DEFB 0,0,0,0,0,0,0,0
 32676 DEFB 0,0,0,0,0,0,0,0
 32684 DEFB 0,0,0,0,0,0,0,0
 32692 DEFB 0,0,0,0,0,0,0,0
 32700 DEFB 0,0,0,0,0,0,0,0
 32708 DEFB 0,0,0,0,0,0,0,0
 32716 DEFB 0,0,0,0,0,0,0,0
 32724 DEFB 0,0,0,0,0,0,0,0
 32732 DEFB 0,0,0,0,0,0,0,0
 32740 DEFB 0,0,0,0,0,0,0,0
 32748 DEFB 0,0,0,0,0,0,0,0
 32756 DEFB 0,0,0,0,0,0,0,0
 32764 DEFB 0,0,0,0

i32768

; Message at 65369
t65369 DEFM "<BB"

; Data block at 65372
b65372 DEFB 126,66,66,0,0,124,66,124
 65380 DEFB 66,66,124,0,0,60,66,64
 65388 DEFB 64,66,60,0,0

; Message at 65393
t65393 DEFM "xDBBDx"

; Data block at 65399
b65399 DEFB 0,0,126,64,124,64,64,126
 65407 DEFB 0,0,126,64,124,64,64,64
 65415 DEFB 0,0,60,66,64

; Message at 65420
t65420 DEFM "NB<"

; Data block at 65423
b65423 DEFB 0,0,66,66,126

; Message at 65428
t65428 DEFM "BBB"

; Data block at 65431
b65431 DEFB 0,0,62,8,8,8,8,62
 65439 DEFB 0,0,2,2,2

; Message at 65444
t65444 DEFM "BB<"

; Unused
s65447 DEFS 2

; Message at 65449
t65449 DEFM "DHpHDB"

; Data block at 65455
b65455 DEFB 0,0,64,64,64,64,64,126
 65463 DEFB 0,0

; Message at 65465
t65465 DEFM "BfZBBB"

; Unused
s65471 DEFS 2

; Message at 65473
t65473 DEFM "BbRJFB"

; Unused
s65479 DEFS 2

; Message at 65481
t65481 DEFM "<BBBB<"

; Data block at 65487
b65487 DEFB 0,0,124,66,66,124,64,64
 65495 DEFB 0,0

; Message at 65497
t65497 DEFM "<BBRJ<"

; Data block at 65503
b65503 DEFB 0,0,124,66,66,124,68,66
 65511 DEFB 0,0,60,64,60,2,66,60
 65519 DEFB 0,0,254,16,16,16,16,16
 65527 DEFB 0,0

; Message at 65529
t65529 DEFM "BBBBB<"

; Unused
s65535 DEFS 1
